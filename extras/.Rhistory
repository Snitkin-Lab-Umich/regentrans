ggplot() +
geom_histogram(data = subset(snv_dists_df_Penn_dated,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_df_Penn_dated,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.2, binwidth = 1) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") + scale_color_manual(values = colors) + ggtitle("All Penn Isolate Pairs < 20 SNV distance by Date by Location of first isolate") + facet_wrap(Loc1 ~ cx_date)
facility_sum = table(locs_Penn)
facility_sum
table(locs_Penn) > 10
facility_sum <- which(unlist(table(locs_Penn) > 10))
locs_Penn_subset <- locs_Penn[locs_Penn %in% names(facility_sum)]
locs_Penn_subset
facility_sum
snv_dists_df_Penn_dated
names(facility_sum)
snv_dists_df_Penn_dated_sub %>% filter(Loc1 %in% names(facility_sum))
snv_dists_df_Penn_dated_sub <- snv_dists_df_Penn_dated %>% filter(Loc1 %in% names(facility_sum))
snv_dists_df_Penn_dated_sub
View(snv_dists_df_Penn)
ggplot() +
geom_histogram(data = subset(snv_dists_df_Penn_dated_sub,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_df_Penn_dated_sub,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.2, binwidth = 1) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") + scale_color_manual(values = colors) + ggtitle("All Penn Isolate Pairs < 20 SNV distance by Date by Location of first isolate") + facet_wrap(Loc1 ~ cx_date)
ggplot() +
geom_histogram(data = subset(snv_dists_df_Penn_dated_sub,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_df_Penn_dated_sub,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.2, binwidth = 1) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") + scale_color_manual(values = colors) + ggtitle("All Penn Isolate Pairs < 20 SNV distance by Date by Location of first isolate") + facet_grid(Loc1 ~ cx_date)
View(snv_dists_df_Penn)
View(snv_dists_df_Penn_dated)
ggplot(data = snv_dists_df_Penn_dated) + geom_histogram(mapping = aes(x = cx_date)) + facet_grid(~Loc1)
snv_dists_df_Penn_dated %>% group_by(cx_date) %>% summarize(n = n())
snv_dists_df_Penn_dated %>% group_by(cx_date) %>% summarize(n = n()) %>% ggplot() + geom_bar(mapping = aes(x = cx_date, y = n))
snv_dists_df_Penn_dated %>% group_by(cx_date) %>% summarize(n = n()) %>% ggplot() + geom_histogram(mapping = aes(x = cx_date, y = n))
snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
#plot how many isolates are present in each facil in each month
snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n()) %>% ggplot() + geom_histogram(mapping = aes(x = cx_date, y = n)) %>% facet_wrap(~ Loc1)
ggplot() + geom_histogram(mapping = aes(x = cx_date, y = n))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n()) %>% ggplot() + geom_histogram(mapping = aes(x = cx_date, y = n))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date, y = n))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date, stat = "count"))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date), stat = "count")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date), stat = "count") %>% facet_wrap(~ Loc1)
View(n_isolates)
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date), stat = "count", color = Loc1)
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_histogram(mapping = aes(x = cx_date, color = Loc1), stat = "count")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, fill = Loc1))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1))
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1), stat = "identity")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1), stat = "identity", position = "dodge")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1), stat = "identity", position = "dodge")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1), stat = "identity", position = "dodge") + lab(x = "Date (month)", y = "Number of isolates from facility", title = "Distribution of number of isolates by facility over time ")
#plot how many isolates are present in each facil in each month
n_isolates <- snv_dists_df_Penn_dated %>% group_by(cx_date, Loc1) %>% summarize(n = n())
ggplot(data = n_isolates) + geom_bar(mapping = aes(x = cx_date, y = n, fill = Loc1), stat = "identity", position = "dodge") + labs(x = "Date (month)", y = "Number of isolates from facility", title = "Distribution of number of isolates by facility over time ")
library(ape)
library(dplyr)
library(devtools)
load_all()
Penn_test_input <- readRDS(file = "/Users/sophiehoffman/Desktop/regentrans/data/Penn_test_input_2.rds")
locs <- Penn_test_input$locs
pt <- Penn_test_input$pt
fasta <- Penn_test_input$fasta
dists <- Penn_test_input$dists
tr <- Penn_test_input$tr
isolates <- intersect(tr$tip.label, names(locs))
locs_sub <- locs[isolates]
subtrs_sub <- ape::subtrees(tr)
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
pureness = 1
bootstrap = NULL
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
View(pure_subtrees)
View(subtrs_sub)
View(pure_subtrees)
load_all()
library(ape)
library(dplyr)
library(devtools)
library(regentrans)
load_all()
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
test_frac_intra <- get_frac_intra(dists = test_dists, locs = test_locs, pt = test_pt)
?get_snv_dists
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_frac_intra_2 <- get_frac_intra(snv_dists = test_snv_dists)
View(test_frac_intra)
View(test_frac_intra_2)
ncol(test_frac_intra) == 5
test_threshs <- threshs = seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
test_threshs <- seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
ncol(test_frac_intra) == 5
nrow(test_frac_intra) == length(threshs)
nrow(test_frac_intra) == length(test_threshs)
colnames(test_frac_intra)
all(colnames(test_frac_intra) == c("Thresh", "n_Inter", "n_Intra", "Frac_Intra", "Frac_Inter"))
sapply(test_frac_intra, class)
all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric"))
all(test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
test_frac_intra$Frac_Intra
test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
snv_dists <- test_snv_dists
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
threshs <- test_threshs
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
View(intra_cts)
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Inter','Frac_Intra')
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Inter','Frac_Intra')
intra_cts
View(intra_cts)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
View(intra_cts)
colnames(intra_cts) <- c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')
View(intra_cts)
load_all()
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
test_threshs <- seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
all(colnames(test_frac_intra) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter'))
all(test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
test_frac_intra$Frac_Intra
test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
View(intra_cts)
intra_cts %>% filter(is.na(Frac_Intra), is.na(Frac_Inter))
intra_cts
intra_cts %>% as.data.frame() %>% filter(is.na(Frac_Intra), is.na(Frac_Inter))
intra_cts %>% as.data.frame() %>% filter(!is.na(Frac_Intra), !is.na(Frac_Inter))
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
nrow(test_frac_intra) <= length(test_threshs)
all(test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
all(test_frac_intra$Frac_inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
length(intersect(test_frac_intra$Thresh, test_threshs)) == nrow(test_frac_intra)
#test get_clusters output
test_pt <- pt[1:4]
test_tr <- keep.tip(tr,names(test_pt))
test_locs <- locs[1:4]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
length(test_clusters) == 3
class(test_pure_subtree_info)
any(class(test_pure_subtree_info) == "data.frame")
class(test_subtrees)
class(test_cluster_pureness)
class(test_cluster_pureness) == "numeric"
all(unname(sapply(test_subtrees, class)) == "phylo")
unname(sapply(test_subtrees, class))
View(test_pure_subtree_info)
ncol(test_pure_subtree_info) == 4
colnames(test_pure_subtree_info)
all(colnames(test_pure_subtree_info) == c("f_id", "subtr_size", "index", "isolate_name"))
nrow(test_pure_subtree_info) <= length(test_locs) & nrow(test_pure_subtree_info) >= 1
sapply(test_pure_subtree_info, class)
sapply(test_pure_subtree_info, class)[1:2]
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_pure_subtree_info
sapply(test_pure_subtree_info, class)
all(sapply(test_pure_subtree_info, class) == c("character", "numeric", "integer", "character"))
test_pure_subtree_info %>% filter(!is.na(index))
filter(test_pure_subtree_info, !is.na(index))
filter(test_pure_subtree_info, !is.na(index))$isolate_name == ""
filter(test_pure_subtree_info, !is.na(index))$isolate_name
filter(test_pure_subtree_info, !is.na(index))$isolate_name == " "
all(filter(test_pure_subtree_info, !is.na(index))$isolate_name == " ")
hi <- rbind(filter(test_pure_subtree_info, !is.na(index)), filter(test_pure_subtree_info, !is.na(index)))
View(hi)
hi$isolate_name == " "
all(hi$isolate_name == " ")
all(filter(test_pure_subtree_info, is.na(index))$size == 1)
all(filter(test_pure_subtree_info, is.na(index))$subtr_size == 1)
all(filter(test_pure_subtree_info, is.na(index))$isolate_name != " ") & all(filter(test_pure_subtree_info, is.na(index))$subtr_size == 1)
unique(locs) == unique(test_pure_subtree_info$locs
)
all(unique(test_locs) == unique(test_pure_subtree_info$locs))
unique(test_locs) == unique(test_pure_subtree_info$f_id)
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) == length(unique(test_pure_subtree_info$f_id))
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) ==
length(unique(test_pure_subtree_info$f_id)) &
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) ==
length(unique(test_locs))
test_subtrees[1]
test_tr
test_subtrees[1] == test_tr
test_subtrees[1]$tip.labels
test_subtrees[1]$tip.label
tesst_first_subtr <- test_subtrees[1]
test_first_subtr <- test_subtrees[1]
View(test_first_subtr)
test_subtrees[1][1]
test_subtrees[1][[1]]
test_subtrees[1][[1]] == test_tr
test_first_subtr <- test_subtrees[1][[1]]
all(test_first_subtr$tip.label == test_tr$tip.label)
test_fasta_2 <- fasta[names(test_locs_5),]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_fasta_2 <- fasta[names(test_locs_5),]
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_fasta_2 <- fasta[names(test_locs_5),]
test_locs_5
test_fasta_2
fasta <- test_fasta_2
locs <- test_locs_5
form = "matrix"
check_facility_fsp_input(fasta, locs, form)
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
isolates <- intersect(names(locs_subset), rownames(fasta))
fasta_sub<-fasta[isolates,]
locs_subset <- locs_subset[isolates]
locs_subset <- locs_subset[order(match(names(locs_subset),rownames(fasta_sub)))]
rownames(fasta_sub) <- unname(locs_subset)
sample_locs <- rownames(fasta_sub)
locs_unique <- unique(unname(locs_subset))
locs_unique
f1 <- locs[1]
f1
f2 <- locs[2]
f2
subset_snp_mat = fasta_sub[sample_locs %in% c(f1, f2), ]
subset_snp_mat
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
subset_snp_mat
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f1
subset_f2 = rownames(subset_snp_mat) %in% f2
subset_f2
?apply
subset_snp_mat[,1]
x <- subset_snp_mat[,1]
alleles = names(table(as.character(x)))
alleles
x <- subset_snp_mat[,2]
alleles = names(table(as.character(x)))
alleles
length(alleles) > 2
x <- subset_snp_mat[,3]
alleles = names(table(as.character(x)))
alleles
subset_snp_mat
as.character(subset_snp_mat)
hi <- as.character(subset_snp_mat)
View(hi)
hi <- as.character(test_fasta_2)
View(hi)
x <- subset_snp_mat[,3]
x
x <- subset_snp_mat[,4]
alleles = names(table(as.character(x)))
alleles
x
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat == 48
View(hi)
hi <- as.character(test_fasta_2)
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == "44" || hi[j,i] == "48"){
print(paste(i, j))
}
}
}
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == "44" || hi[j,i] == "48"){
print(i)
}
}
}
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == 44 || hi[j,i] == 48){
print(i)
}
}
}
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == 88 || hi[j,i] == 48){
print(i)
}
}
}
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat
newX
as.character(test_fasta_2[,2])
as.character(test_fasta_2[,458])
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
load_all()
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
load_all()
load_all()
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
View(fsp_mat)
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
View(fsp_long)
class(fsp_mat)
ncol(fsp_mat) == nrow(fsp_mat)
all(rownames(fsp_mat) == colnames(fsp_mat))
nrow(fsp_mat) <= length(test_locs_5)
nrow(fsp_mat) <= length(test_locs_5) & nrow(fsp_mat) >= 2
length(intersect(rownames(fsp_mat), test_locs_5)) == length(rownames(fsp_mat))
sapply(fsp_mat, class)
sapply(fsp_mat, class) == "numeric"
all(sapply(fsp_mat, class) == "numeric")
class(fsp_long) == "data.frame"
ncol(fsp_long) == 3
nrow(fsp_long) == (length(test_locs_5)^2)-length(test_locs_5)
nrow(fsp_long)
nrow(fsp_long) == (length(unique(test_locs_5))^2)-length(unique(test_locs_5))
colnames(fsp_mat)
colnames(fsp_mat)
colnames(fsp_long)
all(colnames(fsp_long) == c("Facil_1","Facil_2","Fsp_val"))
sapply(fsp_long, class)
all(sapply(fsp_long, class) == "factor","factor","numeric")
all(sapply(fsp_long, class) == c("factor","factor","numeric"))
all(fsp_long$Fsp_val <= 1) & all(fsp_long$Fsp_val > 0)
all(fsp_mat == <= 1)
all(fsp_mat <= 1)
all(fsp_mat <= 1) & all(fsp_mat >= 0)
?diag
diag(fsp_mat)
fsp_mat
class(fsp_mat)
diag(fsp_mat)
matrix(fsp_mat)
as.matrix(fsp_mat)
diag(as.matrix(fsp_mat)
)
all(diag(as.matrix(fsp_mat)) == 0)
use_r("prune_tree")
library(devtools)
use_r("prune_tree")
load_all()
tree
tree <- tr
pt
isolates <- intersect(tree$tip.label, names(pt))
#subset locs
pt_sub <- pt[isolates]
#subset the tree
tree_sub <- ape::keep.tip(tree,isolates)
first_sts = subtrees(tree_sub)
#load libraries
library(ape)
#get subtrees
first_sts = ape::subtrees(tree_sub)
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){print(x)
temp_tree = first_sts[[x]];
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(substr(strsplit(x, "-")[[1]][2], 1, 1), strsplit(x, "-")[[1]][3])}))
if (length(unique(temp_tree_mat[,1])) > 1){
keep_tree = temp_tree
} else if (
sum(temp_tree_mat[,2] != 0) == 0){
keep_tree = temp_tree;
} else if (
sum(temp_tree_mat[,2] == 0) > 0){
drop_tip = temp_tree_mat[temp_tree_mat[,2] != 0,,drop = FALSE]
keep_tree = drop.tip(temp_tree, rownames(drop_tip))
} else if (
length(unique(temp_tree_mat[,2][temp_tree_mat[,2] != 0])) > 0){
# This chunk will not run because path_visit file is not provided on github.
# Will keep both tips for now.
# pt_visit_date = sapply(rownames(temp_tree_mat),FUN = function(z){
#   pt = strsplit(z, "-")[[1]][2]
#   visit = strsplit(z, "-")[[1]][3]
#   date = path_visit[path_visit$studyID %in% pt & path_visit$visit %in% visit, "date"]
# })
# earlier_pt_date = unique(c(names(which.min(pt_visit_date)), names(pt_visit_date[grep("-0$", names(pt_visit_date))])))
earlier_pt_date = ""
pt_visit_date = ""
keep_tree = drop.tip(temp_tree, setdiff(names(pt_visit_date), earlier_pt_date))
}
diff = setdiff(temp_tree$tip.label, keep_tree$tip.label)
})
x = 1
temp_tree = first_sts[[x]]
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(substr(strsplit(x, "-")[[1]][2], 1, 1), strsplit(x, "-")[[1]][3])}))
View(temp_tree_mat)
hi <- "702-3020-0-RVRE_S18_L001"
x <- "702-3020-0-RVRE_S18_L001"
substr(strsplit(x, "-")[[1]][2], 1, 1)
strsplit(x, "-")[[1]][3]
x <- 546-4011-0-RVRE_S58_L001
x <- "546-4011-0-RVRE_S58_L001"
strsplit(x, "-")[[1]][3]
substr(strsplit(x, "-")[[1]][2], 1, 1)
temp_tree$tip.label[1]
locs["PCMP_H100"]
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(locs[x], pt[x])}))
length(unique(temp_tree_mat[,1])) > 1
if (length(unique(temp_tree_mat[,1])) > 1){
keep_tree = temp_tree
} else if (
sum(temp_tree_mat[,2] != 0) == 0){
keep_tree = temp_tree;
} else if (
sum(temp_tree_mat[,2] == 0) > 0){
drop_tip = temp_tree_mat[temp_tree_mat[,2] != 0,,drop = FALSE]
keep_tree = drop.tip(temp_tree, rownames(drop_tip))
} else if (
length(unique(temp_tree_mat[,2][temp_tree_mat[,2] != 0])) > 0){
earlier_pt_date = ""
pt_visit_date = ""
keep_tree = drop.tip(temp_tree, setdiff(names(pt_visit_date), earlier_pt_date))
}
temp_tree_mat[,1]
length(unique(temp_tree_mat[,1])) > 1
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x],locs[x])}))
temp_tree_mat[,1]
length(unique(temp_tree_mat[,1])) > 1
temp_tree_mat[,2]
n_per_pat <- table(temp_tree_mat[,1])
n_per_pat
n_per_pat > 2
n_per_pat[n_per_pat > 2]
n_per_pat[n_per_pat > 1]
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
i = 1
names(n_per_pat)[i]
rownames(temp_tree_mat) == names(n_per_pat)[i]
temp_tree_mat[,1] == names(n_per_pat)[i]
?indexof
match(temp_tree_mat[,1] == names(n_per_pat)[i])
match(temp_tree_mat[,1], names(n_per_pat)[i])
match(names(n_per_pat)[i], temp_tree_mat[,1])
which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
tips[2:length(tips)]
#find the indexes of all isolates from that patient
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
drop_tips <- tips[2:length(tips)]
drop_tips
rownames(drop_tip)
temp_tree_mat[drop_tip]
temp_tree_mat[drop_tips]
temp_tree_mat[drop_tips,]
rownames(temp_tree_mat[drop_tips,])
rownames(temp_tree_mat)[drop_tips,]
rownames(temp_tree_mat)[drop_tips]
