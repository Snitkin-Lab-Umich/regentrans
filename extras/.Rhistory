locs <- locs[order(match(names(locs),rownames(fasta)))]
rownames(fasta) <- unname(locs)
fasta
sample_locs = rownames(fasta)
locs = unique(unname(locs))
facil_dist = matrix(0, ncol = length(locs), nrow = length(locs), dimnames = list(locs, locs))
for(f1 in locs){
for(f2 in locs){
if (f1 == f2) {next}
#subset fasta file to just that those locations
subset_snp_mat = fasta[sample_locs %in% c(f1, f2), ]
#columns
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
subset_f1 = rownames(subset_snp_mat) %in% f1 #substr(sapply(rownames(subset_snp_mat), FUN = function(x){strsplit(x, "-")[[1]][2]}), 1, 1) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2 #substr(sapply(rownames(subset_snp_mat), FUN = function(x){strsplit(x, "-")[[1]][2]}), 1, 1) %in% f2
#BETWEEN POPLUATION VARIATION
between = apply(subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0} else{
f1_allele1 = sum(as.character(x)[subset_f1] %in% alleles[1])/sum(subset_f1)
f1_allele2 = sum(as.character(x)[subset_f1] %in% alleles[2])/sum(subset_f1)
f2_allele1 = sum(as.character(x)[subset_f2] %in% alleles[1])/sum(subset_f2)
f2_allele2 = sum(as.character(x)[subset_f2] %in% alleles[2])/sum(subset_f2)
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
between_sum = sum(between)
#WITHIN POPULATION 1 VARIATION
f1_subset_snp_mat = subset_snp_mat[subset_f1,apply(subset_snp_mat[subset_f1,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f1 = apply(f1_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f1_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f1_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f1_allele1 * f1_allele2)^2
}
})
within_f1_sum = sum(within_f1)
#WITHIN POPULATION 2 VARIATION
f2_subset_snp_mat = subset_snp_mat[subset_f2,apply(subset_snp_mat[subset_f2,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f2 = apply(f2_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f2_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f2_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f2_allele1 * f2_allele2)^2}
})
within_f2_sum = sum(within_f2)
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
facil_dist[f1,f2] = Fsp
}#end loop 1
}#end loop 2
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Analysis/regentrans_data/2021-02-16_subset-data/data/ltach-metadata.csv")
#alignment path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta",
format = "fasta")
#tree path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/iqtree_masked_wga/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/iqtree_masked_wga/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
#pt
pt <- metadata$patient_id
names(pt) <- paste0("PCMP_H", metadata$isolate_no)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
dists <- dist.dna(x = fasta, as.matrix = TRUE, model = "N")
fasta_backup <- fasta
snv_dists <- get_snv_dists(dists, locs, pt)
snv_dist_no_pt <- get_snv_dists(dists, locs)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
dists_backup <- dists
dists
View(dists)
check_get_snv_dists_input(dists, locs, pt)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
check_get_snv_dists_input(dists, locs, pt)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
check_get_snv_dists_input(dists, locs, pt)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
check_get_snv_dists_input(dists, locs, pt)
isolates <- intersect(intersect(names(locs), names(pt)), rownames(dists))
pt_sub <- pt[isolates]
isolates
loc_sub <- locs[isolates]
dists_sub <- dists[isolates, isolates]
View(dists_sub)
dim(dists)
dim(dists_sub)
length(isolates)
snps <- na.omit(data.frame(as.table(as.matrix(dists_sub))))
#change freq colname?
colnames(snps) <- c("Isolate1", "Isolate2", "Pairwise_Dists")
#add locs
snps$Loc1 <- loc_sub[snps$Isolate1]
snps$Loc2 <- loc_sub[snps$Isolate2]
#do pt stuff
if(!is.null(pt)){
#add pts
snps$Patient1 <- pt_sub[snps$Isolate1]
snps$Patient2 <- pt_sub[snps$Isolate2]
#add labels
snp_facility_pairs <- bind_cols(snps %>% filter(Patient1 != Patient2) %>% mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
}
else{
#add labels
snp_facility_pairs <- bind_cols(snps %>% mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
}
View(snp_facility_pairs)
snp_facility_pairs <- bind_cols(snps %>% filter(Patient1 != Patient2) %>% mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
x <- 1:5
y <- 1:5
for(i in x){
for(j in y){
print(i+j)
}
}
sapply(x, function(i){
sapply(y, function(i){
i+j
})
})
x <- 1:5
y <- 1:5
for(i in x){
for(j in y){
print(i+j)
}
}
sapply(x, function(i){
sapply(y, function(j){
i+j
})
})
x <- 1:5
y <- 1:5
for(i in x){
for(j in y){
print(i+j)
}
}
sapply(x, function(i){
sapply(y, function(j){
i+j
})
})
x <- 1:5
y <- 1:5
for(i in x){
for(j in y){
print(i+j)
}
}
sapply(x, function(i){
sapply(y, function(j){
i+j
})
})
x <- 1:5
y <- 1:5
for(i in x){
for(j in y){
print(i+j)
}
}
sapply(x, function(i){
sapply(y, function(j){
i+j
})
})
sapply(x, function(i){
sapply(y, function(j){
if(i == j) {next}
i+j
})
})
sapply(x, function(i){
sapply(y, function(j){
if(i == j) {return(0)}
i+j
})
})
sapply(x, function(i){
sapply(y, function(j){
if(i == j) {return()}
i+j
})
})
isolates <- intersect(names(locs)[1:10], rownames(fasta))
isolates
fasta<-fasta[isolates,]
fasta
locs <- locs[isolates]
locs <- locs[order(match(names(locs),rownames(fasta)))]
rownames(fasta) <- unname(locs)
sample_locs = rownames(fasta)
locs_unique = unique(unname(locs))
facil_dist = matrix(0, ncol = length(locs_unique), nrow = length(locs_unique), dimnames = list(locs_unique, locs_unique))
View(facil_dist)
locs_unique = unique(unname(sample_locs))
facil_dist = matrix(0, ncol = length(locs_unique), nrow = length(locs_unique), dimnames = list(locs_unique, locs_unique))
sample_locs
rownames(fasta)
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
#make small fasta with a few to check
length(locs)
locs[1:100]
locs <- locs[1:100]
check_facility_fsp(fasta, locs)
fasta <- fasta_backup
check_facility_fsp(fasta, locs)
isolates <- intersect(names(locs), rownames(fasta))
isolates
fasta<-fasta[isolates,]
locs <- locs[isolates]
#order the locs object to match the order of rownames of the fasta
locs <- locs[order(match(names(locs),rownames(fasta)))]
#change the rownames of the fasta to the location names
rownames(fasta) <- unname(locs)
#make a list of the location names
sample_locs = rownames(fasta)
#unique list of locations
locs_unique = unique(unname(sample_locs))
table(sample_locs)
table(sample_locs) == 1
names(table(sample_locs) == 1)
sample_locs
sample_locs > 1
table(sample_locs) > 1
table(sample_locs) <= 1
hi <- table(sample_locs) <= 1
hi[TRUE]
hi$TRUE
sample_locs
table(sample_locs) <= 1
hi <- table(sample_locs) <= 1
hi
names(hi == TRUE)
hi == TRUE
which(unlist(hi))
table(sample_locs)
hi2 <- which(unlist(hi))
hi2
unlist(hi)
hi2 <- which(unlist(table(sample_locs) <= 1))
hi2
names(which(unlist(table(sample_locs) <= 1)))
hi2 <- names(which(unlist(table(sample_locs) <= 1)))
rownames_fasta %in% hi2
rownames(fasta) %in% hi2
rownames(fasta) !%in% hi2
hi2 <- names(which(unlist(table(sample_locs) > 1)))
rownames(fasta) %in% hi2
fasta_more_than_one_facil <- fasta[rownames(fasta) %in% hi2,]
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
locs <- locs[1:100]
table(locs)
locs_over_one <- which(unlist(table(sample_locs) > 1))
locs_over_one
locs %in% names(locs_over_one)
locs_subset <- locs[locs %in% names(locs_over_one)]
locs_subset
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
locs_subset
table(locs_subset)
fasta <- fasta_backup
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
locs <- locs[1:100]
check_facility_fsp(fasta, locs)
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
#make a list of the ones they have in common for subsetting
isolates <- intersect(names(locs_subset), rownames(fasta))
#subset the DNAbin object to the samples they have in common
fasta<-fasta[isolates,]
#subset the locs object to the samples they have in common
locs <- locs[isolates]
#order the locs object to match the order of rownames of the fasta
locs <- locs[order(match(names(locs),rownames(fasta)))]
#change the rownames of the fasta to the location names
rownames(fasta) <- unname(locs)
#make a list of the location names
sample_locs = rownames(fasta)
#unique list of locations
locs_unique = unique(unname(sample_locs))
#CALCULATE INTRA- AND INTER-FACILITY DISTANCE
facil_dist = matrix(0, ncol = length(locs_unique), nrow = length(locs_unique), dimnames = list(locs_unique, locs_unique))
locs_over_one
locs_subset
fasta <- fasta_backup
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
locs <- locs[1:100]
check_facility_fsp(fasta, locs)
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
#make a list of the ones they have in common for subsetting
isolates <- intersect(names(locs_subset), rownames(fasta))
#subset the DNAbin object to the samples they have in common
fasta<-fasta[isolates,]
#subset the locs object to the samples they have in common
locs_subset <- locs_subset[isolates]
#order the locs object to match the order of rownames of the fasta
locs_subset <- locs_subset[order(match(names(locs_subset),rownames(fasta)))]
#change the rownames of the fasta to the location names
rownames(fasta) <- unname(locs_subset)
#make a list of the location names
sample_locs = rownames(fasta)
#unique list of locations
locs_unique = unique(unname(locs_subset))
#CALCULATE INTRA- AND INTER-FACILITY DISTANCE
facil_dist = matrix(0, ncol = length(locs_unique), nrow = length(locs_unique), dimnames = list(locs_unique, locs_unique))
sapply(x, function(i){
sapply(y, function(j){
if(i == j) {return()}
else{return(i+j)}
i+j
})
})
sapply(locs_unique, function(f1)){
sapply(locs_unique, function(f2)){
if (f1 == f2) {return()}
#subset fasta file to just that those locations
subset_snp_mat = fasta[sample_locs %in% c(f1, f2), ]
#make sure the position is not all unknown or no variance, subset to the ones that have some variation
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#figure out which are from each facility
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2
#BETWEEN POPLUATION VARIATION
#loop over columns (variants)
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
#make function to call x4
f1_allele1 = sum(as.character(x)[subset_f1] %in% alleles[1])/sum(subset_f1)
f1_allele2 = sum(as.character(x)[subset_f1] %in% alleles[2])/sum(subset_f1)
f2_allele1 = sum(as.character(x)[subset_f2] %in% alleles[1])/sum(subset_f2)
f2_allele2 = sum(as.character(x)[subset_f2] %in% alleles[2])/sum(subset_f2)
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
#WITHIN POPULATION 1 VARIATION
#subset to first location
f1_subset_snp_mat = subset_snp_mat[subset_f1,apply(subset_snp_mat[subset_f1,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#same as above
within_f1 = apply(f1_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f1_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f1_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f1_allele1 * f1_allele2)^2
}
})
within_f1_sum = sum(within_f1)
#WITHIN POPULATION 2 VARIATION
f2_subset_snp_mat = subset_snp_mat[subset_f2,apply(subset_snp_mat[subset_f2,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f2 = apply(f2_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f2_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f2_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f2_allele1 * f2_allele2)^2}
})
within_f2_sum = sum(within_f2)
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
return(Fsp)
}#end loop 1
}#end loop 2
locs_unique
sapply(locs_unique, function(f1){
sapply(locs_unique, function(f2){
if (f1 == f2) {return()}
#subset fasta file to just that those locations
subset_snp_mat = fasta[sample_locs %in% c(f1, f2), ]
#make sure the position is not all unknown or no variance, subset to the ones that have some variation
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#figure out which are from each facility
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2
#BETWEEN POPLUATION VARIATION
#loop over columns (variants)
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
#make function to call x4
f1_allele1 = sum(as.character(x)[subset_f1] %in% alleles[1])/sum(subset_f1)
f1_allele2 = sum(as.character(x)[subset_f1] %in% alleles[2])/sum(subset_f1)
f2_allele1 = sum(as.character(x)[subset_f2] %in% alleles[1])/sum(subset_f2)
f2_allele2 = sum(as.character(x)[subset_f2] %in% alleles[2])/sum(subset_f2)
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
#WITHIN POPULATION 1 VARIATION
#subset to first location
f1_subset_snp_mat = subset_snp_mat[subset_f1,apply(subset_snp_mat[subset_f1,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#same as above
within_f1 = apply(f1_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f1_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f1_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f1_allele1 * f1_allele2)^2
}
})
within_f1_sum = sum(within_f1)
#WITHIN POPULATION 2 VARIATION
f2_subset_snp_mat = subset_snp_mat[subset_f2,apply(subset_snp_mat[subset_f2,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f2 = apply(f2_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f2_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f2_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f2_allele1 * f2_allele2)^2}
})
within_f2_sum = sum(within_f2)
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
return(Fsp)
})#end loop 1
})#end loop 2
test <- data.frame(sapply(x, function(i){
sapply(y, function(j){
if(i == j) {return()}
else{return(i+j)}
i+j
})
}))
View(test)
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
#pt
pt <- metadata$patient_id
names(pt) <- paste0("PCMP_H", metadata$isolate_no)
all(names(pt) == names(locs))
locs_sub <- locs[1:100]
pt_sub <- pt[1:100]
locs_sub <- locs[1:100]
pt_sub <- pt[1:100]
common <- intersect(names(locs_sub), rownames(fasta))
locs_sub
fasta <- fasta_backup
common <- intersect(names(locs_sub), rownames(fasta))
locs_sub <- locs[1:102]
pt_sub <- pt[1:102]
common <- intersect(names(locs_sub), rownames(fasta))
fasta<-fasta[common,]
fasta <- fasta_backup
fasta_sub<-fasta[common,]
dists <- dist.dna(x = fasta_sub, as.matrix = TRUE, model = "N")
Penn_test_input <- list("locs" = locs_sub, "pt" = pt_sub, "fasta" = fasta_sub, "dists" <- dists)
locs_sub <- locs[locs %in% commmon]
locs_sub <- locs[locs %in% common]
locs_sub <- locs[names(locs) %in% common]
pt_sub <- pt[names(pt) %in% common]
Penn_test_input <- list("locs" = locs_sub, "pt" = pt_sub, "fasta" = fasta_sub, "dists" <- dists)
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans/R")
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans/extras")
saveRDS(Penn_test_input, file = "Penn_test_input.rds")
Penn_test_input <- "hi"
readRDS(file = "Penn_test_input.rds")
Penn_test_input <- readRDS(file = "Penn_test_input.rds")
Penn_test_input[1]
Penn_test_input <- list("locs" = locs_sub, "pt" = pt_sub, "fasta" = fasta_sub, "dists" <- dists)
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans/extras")
saveRDS(Penn_test_input, file = "Penn_test_input.rds")
#test read back in
Penn_test_input <- readRDS(file = "Penn_test_input.rds")
Penn_test_input <- list("locs" = locs_sub, "pt" = pt_sub, "fasta" = fasta_sub, "dists" = dists)
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans/extras")
saveRDS(Penn_test_input, file = "Penn_test_input.rds")
#test read back in
Penn_test_input <- readRDS(file = "Penn_test_input.rds")
locs <- Penn_test_input$locs
pt <- Penn_test_input$pt
fasta <- Penn_test_input$fasta
dists <- Penn_test_input$dists
locs
pt
fasta
dists
