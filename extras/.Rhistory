threshs <- test_threshs
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
View(intra_cts)
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Inter','Frac_Intra')
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Inter','Frac_Intra')
intra_cts
View(intra_cts)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
View(intra_cts)
colnames(intra_cts) <- c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')
View(intra_cts)
load_all()
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
test_threshs <- seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
all(colnames(test_frac_intra) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter'))
all(test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
test_frac_intra$Frac_Intra
test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
View(intra_cts)
intra_cts %>% filter(is.na(Frac_Intra), is.na(Frac_Inter))
intra_cts
intra_cts %>% as.data.frame() %>% filter(is.na(Frac_Intra), is.na(Frac_Inter))
intra_cts %>% as.data.frame() %>% filter(!is.na(Frac_Intra), !is.na(Frac_Inter))
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
nrow(test_frac_intra) <= length(test_threshs)
all(test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
all(test_frac_intra$Frac_inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter))
length(intersect(test_frac_intra$Thresh, test_threshs)) == nrow(test_frac_intra)
#test get_clusters output
test_pt <- pt[1:4]
test_tr <- keep.tip(tr,names(test_pt))
test_locs <- locs[1:4]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
length(test_clusters) == 3
class(test_pure_subtree_info)
any(class(test_pure_subtree_info) == "data.frame")
class(test_subtrees)
class(test_cluster_pureness)
class(test_cluster_pureness) == "numeric"
all(unname(sapply(test_subtrees, class)) == "phylo")
unname(sapply(test_subtrees, class))
View(test_pure_subtree_info)
ncol(test_pure_subtree_info) == 4
colnames(test_pure_subtree_info)
all(colnames(test_pure_subtree_info) == c("f_id", "subtr_size", "index", "isolate_name"))
nrow(test_pure_subtree_info) <= length(test_locs) & nrow(test_pure_subtree_info) >= 1
sapply(test_pure_subtree_info, class)
sapply(test_pure_subtree_info, class)[1:2]
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_pure_subtree_info
sapply(test_pure_subtree_info, class)
all(sapply(test_pure_subtree_info, class) == c("character", "numeric", "integer", "character"))
test_pure_subtree_info %>% filter(!is.na(index))
filter(test_pure_subtree_info, !is.na(index))
filter(test_pure_subtree_info, !is.na(index))$isolate_name == ""
filter(test_pure_subtree_info, !is.na(index))$isolate_name
filter(test_pure_subtree_info, !is.na(index))$isolate_name == " "
all(filter(test_pure_subtree_info, !is.na(index))$isolate_name == " ")
hi <- rbind(filter(test_pure_subtree_info, !is.na(index)), filter(test_pure_subtree_info, !is.na(index)))
View(hi)
hi$isolate_name == " "
all(hi$isolate_name == " ")
all(filter(test_pure_subtree_info, is.na(index))$size == 1)
all(filter(test_pure_subtree_info, is.na(index))$subtr_size == 1)
all(filter(test_pure_subtree_info, is.na(index))$isolate_name != " ") & all(filter(test_pure_subtree_info, is.na(index))$subtr_size == 1)
unique(locs) == unique(test_pure_subtree_info$locs
)
all(unique(test_locs) == unique(test_pure_subtree_info$locs))
unique(test_locs) == unique(test_pure_subtree_info$f_id)
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) == length(unique(test_pure_subtree_info$f_id))
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) ==
length(unique(test_pure_subtree_info$f_id)) &
length(intersect(unique(test_locs), unique(test_pure_subtree_info$f_id))) ==
length(unique(test_locs))
test_subtrees[1]
test_tr
test_subtrees[1] == test_tr
test_subtrees[1]$tip.labels
test_subtrees[1]$tip.label
tesst_first_subtr <- test_subtrees[1]
test_first_subtr <- test_subtrees[1]
View(test_first_subtr)
test_subtrees[1][1]
test_subtrees[1][[1]]
test_subtrees[1][[1]] == test_tr
test_first_subtr <- test_subtrees[1][[1]]
all(test_first_subtr$tip.label == test_tr$tip.label)
test_fasta_2 <- fasta[names(test_locs_5),]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_fasta_2 <- fasta[names(test_locs_5),]
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_fasta_2 <- fasta[names(test_locs_5),]
test_locs_5
test_fasta_2
fasta <- test_fasta_2
locs <- test_locs_5
form = "matrix"
check_facility_fsp_input(fasta, locs, form)
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
isolates <- intersect(names(locs_subset), rownames(fasta))
fasta_sub<-fasta[isolates,]
locs_subset <- locs_subset[isolates]
locs_subset <- locs_subset[order(match(names(locs_subset),rownames(fasta_sub)))]
rownames(fasta_sub) <- unname(locs_subset)
sample_locs <- rownames(fasta_sub)
locs_unique <- unique(unname(locs_subset))
locs_unique
f1 <- locs[1]
f1
f2 <- locs[2]
f2
subset_snp_mat = fasta_sub[sample_locs %in% c(f1, f2), ]
subset_snp_mat
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
subset_snp_mat
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f1
subset_f2 = rownames(subset_snp_mat) %in% f2
subset_f2
?apply
subset_snp_mat[,1]
x <- subset_snp_mat[,1]
alleles = names(table(as.character(x)))
alleles
x <- subset_snp_mat[,2]
alleles = names(table(as.character(x)))
alleles
length(alleles) > 2
x <- subset_snp_mat[,3]
alleles = names(table(as.character(x)))
alleles
subset_snp_mat
as.character(subset_snp_mat)
hi <- as.character(subset_snp_mat)
View(hi)
hi <- as.character(test_fasta_2)
View(hi)
x <- subset_snp_mat[,3]
x
x <- subset_snp_mat[,4]
alleles = names(table(as.character(x)))
alleles
x
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat == 48
View(hi)
hi <- as.character(test_fasta_2)
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == "44" || hi[j,i] == "48"){
print(paste(i, j))
}
}
}
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == "44" || hi[j,i] == "48"){
print(i)
}
}
}
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == 44 || hi[j,i] == 48){
print(i)
}
}
}
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
for(i in 1:ncol(hi)){
for(j in 1:nrow(hi)){
if(hi[j,i] == 88 || hi[j,i] == 48){
print(i)
}
}
}
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
subset_snp_mat
newX
as.character(test_fasta_2[,2])
as.character(test_fasta_2[,458])
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
load_all()
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
load_all()
load_all()
fsp_mat <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "matrix")
View(fsp_mat)
fsp_long <- get_facility_fsp(fasta = test_fasta_2, locs = test_locs_5, form = "long")
View(fsp_long)
class(fsp_mat)
ncol(fsp_mat) == nrow(fsp_mat)
all(rownames(fsp_mat) == colnames(fsp_mat))
nrow(fsp_mat) <= length(test_locs_5)
nrow(fsp_mat) <= length(test_locs_5) & nrow(fsp_mat) >= 2
length(intersect(rownames(fsp_mat), test_locs_5)) == length(rownames(fsp_mat))
sapply(fsp_mat, class)
sapply(fsp_mat, class) == "numeric"
all(sapply(fsp_mat, class) == "numeric")
class(fsp_long) == "data.frame"
ncol(fsp_long) == 3
nrow(fsp_long) == (length(test_locs_5)^2)-length(test_locs_5)
nrow(fsp_long)
nrow(fsp_long) == (length(unique(test_locs_5))^2)-length(unique(test_locs_5))
colnames(fsp_mat)
colnames(fsp_mat)
colnames(fsp_long)
all(colnames(fsp_long) == c("Facil_1","Facil_2","Fsp_val"))
sapply(fsp_long, class)
all(sapply(fsp_long, class) == "factor","factor","numeric")
all(sapply(fsp_long, class) == c("factor","factor","numeric"))
all(fsp_long$Fsp_val <= 1) & all(fsp_long$Fsp_val > 0)
all(fsp_mat == <= 1)
all(fsp_mat <= 1)
all(fsp_mat <= 1) & all(fsp_mat >= 0)
?diag
diag(fsp_mat)
fsp_mat
class(fsp_mat)
diag(fsp_mat)
matrix(fsp_mat)
as.matrix(fsp_mat)
diag(as.matrix(fsp_mat)
)
all(diag(as.matrix(fsp_mat)) == 0)
use_r("prune_tree")
library(devtools)
use_r("prune_tree")
load_all()
tree
tree <- tr
pt
isolates <- intersect(tree$tip.label, names(pt))
#subset locs
pt_sub <- pt[isolates]
#subset the tree
tree_sub <- ape::keep.tip(tree,isolates)
first_sts = subtrees(tree_sub)
#load libraries
library(ape)
#get subtrees
first_sts = ape::subtrees(tree_sub)
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){print(x)
temp_tree = first_sts[[x]];
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(substr(strsplit(x, "-")[[1]][2], 1, 1), strsplit(x, "-")[[1]][3])}))
if (length(unique(temp_tree_mat[,1])) > 1){
keep_tree = temp_tree
} else if (
sum(temp_tree_mat[,2] != 0) == 0){
keep_tree = temp_tree;
} else if (
sum(temp_tree_mat[,2] == 0) > 0){
drop_tip = temp_tree_mat[temp_tree_mat[,2] != 0,,drop = FALSE]
keep_tree = drop.tip(temp_tree, rownames(drop_tip))
} else if (
length(unique(temp_tree_mat[,2][temp_tree_mat[,2] != 0])) > 0){
# This chunk will not run because path_visit file is not provided on github.
# Will keep both tips for now.
# pt_visit_date = sapply(rownames(temp_tree_mat),FUN = function(z){
#   pt = strsplit(z, "-")[[1]][2]
#   visit = strsplit(z, "-")[[1]][3]
#   date = path_visit[path_visit$studyID %in% pt & path_visit$visit %in% visit, "date"]
# })
# earlier_pt_date = unique(c(names(which.min(pt_visit_date)), names(pt_visit_date[grep("-0$", names(pt_visit_date))])))
earlier_pt_date = ""
pt_visit_date = ""
keep_tree = drop.tip(temp_tree, setdiff(names(pt_visit_date), earlier_pt_date))
}
diff = setdiff(temp_tree$tip.label, keep_tree$tip.label)
})
x = 1
temp_tree = first_sts[[x]]
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(substr(strsplit(x, "-")[[1]][2], 1, 1), strsplit(x, "-")[[1]][3])}))
View(temp_tree_mat)
hi <- "702-3020-0-RVRE_S18_L001"
x <- "702-3020-0-RVRE_S18_L001"
substr(strsplit(x, "-")[[1]][2], 1, 1)
strsplit(x, "-")[[1]][3]
x <- 546-4011-0-RVRE_S58_L001
x <- "546-4011-0-RVRE_S58_L001"
strsplit(x, "-")[[1]][3]
substr(strsplit(x, "-")[[1]][2], 1, 1)
temp_tree$tip.label[1]
locs["PCMP_H100"]
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(locs[x], pt[x])}))
length(unique(temp_tree_mat[,1])) > 1
if (length(unique(temp_tree_mat[,1])) > 1){
keep_tree = temp_tree
} else if (
sum(temp_tree_mat[,2] != 0) == 0){
keep_tree = temp_tree;
} else if (
sum(temp_tree_mat[,2] == 0) > 0){
drop_tip = temp_tree_mat[temp_tree_mat[,2] != 0,,drop = FALSE]
keep_tree = drop.tip(temp_tree, rownames(drop_tip))
} else if (
length(unique(temp_tree_mat[,2][temp_tree_mat[,2] != 0])) > 0){
earlier_pt_date = ""
pt_visit_date = ""
keep_tree = drop.tip(temp_tree, setdiff(names(pt_visit_date), earlier_pt_date))
}
temp_tree_mat[,1]
length(unique(temp_tree_mat[,1])) > 1
temp_tree_mat = t(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x],locs[x])}))
temp_tree_mat[,1]
length(unique(temp_tree_mat[,1])) > 1
temp_tree_mat[,2]
n_per_pat <- table(temp_tree_mat[,1])
n_per_pat
n_per_pat > 2
n_per_pat[n_per_pat > 2]
n_per_pat[n_per_pat > 1]
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
i = 1
names(n_per_pat)[i]
rownames(temp_tree_mat) == names(n_per_pat)[i]
temp_tree_mat[,1] == names(n_per_pat)[i]
?indexof
match(temp_tree_mat[,1] == names(n_per_pat)[i])
match(temp_tree_mat[,1], names(n_per_pat)[i])
match(names(n_per_pat)[i], temp_tree_mat[,1])
which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
tips[2:length(tips)]
#find the indexes of all isolates from that patient
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
drop_tips <- tips[2:length(tips)]
drop_tips
rownames(drop_tip)
temp_tree_mat[drop_tip]
temp_tree_mat[drop_tips]
temp_tree_mat[drop_tips,]
rownames(temp_tree_mat[drop_tips,])
rownames(temp_tree_mat)[drop_tips,]
rownames(temp_tree_mat)[drop_tips]
#devtools::load_data(pkg = "regentrans")
devtools::install_github('Snitkin-Lab-Umich/regentrans')
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(regentrans)
#set theme
theme_set(theme_bw() + theme(#axis.text.x = element_text(angle=90,vjust = 0.5, hjust = 1),
strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(regentrans)
#set theme
theme_set(theme_bw() + theme(#axis.text.x = element_text(angle=90,vjust = 0.5, hjust = 1),
strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
?dist.dna
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locos, pt = regentrans::pt)
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
colors <- c("Intra-facility pair" = "red", "Inter-facility pair" = "blue")
ggplot() +
geom_histogram(data = subset(snv_dists_df_Penn,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_df_Penn,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.5) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") + scale_color_manual(values = colors) + facet_wrap(~ Loc1, ncol = 4) + ggtitle("All Penn Isolate Pairs < 1000 SNV distance by facility")
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
colors <- c("Intra-facility pair" = "red", "Inter-facility pair" = "blue")
ggplot() +
geom_histogram(data = subset(snv_dists,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.5) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") + scale_color_manual(values = colors) + facet_wrap(~ Loc1, ncol = 4) + ggtitle("All Penn Isolate Pairs < 1000 SNV distance by facility")
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
colors <- c("Intra-facility pair" = "red", "Inter-facility pair" = "blue")
ggplot() +
geom_histogram(data = subset(snv_dists,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.5) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
colors <- c("Intra-facility pair" = "red", "Inter-facility pair" = "blue")
ggplot() +
geom_histogram(data = subset(snv_dists,Pair_Type == "Inter-facility pair" ), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.5) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
snv_dists <- get_snv_dists(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
colors <- c("Intra-facility pair" = "red", "Inter-facility pair" = "blue")
ggplot() +
geom_histogram(data = subset(snv_dists,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 1000), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.5) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
View(frac_intra)
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, fill = Frac_Intra)) + geom_bar(position = "fill")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, fill = Frac_Intra)) + geom_bar(stat = "identity")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue") + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Intra-Facility Pairs at Each SNV Distance Threshold")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.2) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Intra-Facility Pairs at Each SNV Distance Threshold")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Intra-Facility Pairs at Each SNV Distance Threshold")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Intra-Facility Pairs \nat Each SNV Distance Threshold")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction Isolate Pairs From The Same Facility \nat Each SNV Distance Threshold")
library(gridExtra)
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
frac_intra_plot <- ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from the Same Facility \nat Each SNV Distance Threshold") + ylim(0, 1)
frac_inter_plot <- ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Inter)) + geom_bar(stat = "identity", fill = "red", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Inter-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from \nDifferent Facilities at Each SNV Distance Threshold") + ylim(0, 1)
grid.arrange(frac_intra_plot, frac_inter_plot, ncol=2)
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = regentrans::dists, locs = regentrans::locs, pt = regentrans::pt)
frac_intra_plot <- ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from the Same Facility \nat Each SNV Distance Threshold") + ylim(0, 1) + theme(plot.title = element_text(size = 10))
frac_inter_plot <- ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Inter)) + geom_bar(stat = "identity", fill = "red", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Inter-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from \nDifferent Facilities at Each SNV Distance Threshold") + ylim(0, 1) + theme(plot.title = element_text(size = 10))
grid.arrange(frac_intra_plot, frac_inter_plot, ncol=2)
clusters <- get_clusters(regentrans::tr,regentrans::locs)
#dissect output
pure_subtree_info <- clusters$pure_subtree_info
subtrees <- clusters$subtrees
ggplot(data = pure_subtree_info, aes(x = f_id, y = subtr_size)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2) + labs(y = "Number of Isolates in \nPhylogenetic Cluster", x = "Facility ID", title = "Pure Subtree Information")
ggplot(data = pure_subtree_info, aes(x = f_id, y = subtr_size)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, fill = "blue") + labs(y = "Number of Isolates in \nPhylogenetic Cluster", x = "Facility ID", title = "Pure Subtree Information")
ggplot(data = pure_subtree_info, aes(x = f_id, y = subtr_size, fill = "blue")) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2) + labs(y = "Number of Isolates in \nPhylogenetic Cluster", x = "Facility ID", title = "Pure Subtree Information")
ggplot(data = pure_subtree_info, aes(x = f_id, y = subtr_size)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Isolates in \nPhylogenetic Cluster", x = "Facility ID", title = "Pure Subtree Information")
mpr_tree = midpoint.root(regentrans::tr)
gheatmap(ggtree(mpr_tree, layout = "circular"),as.data.frame(regentrans::locs), color = NA)
mpr_tree = midpoint.root(regentrans::tr)
gheatmap(ggtree(mpr_tree, layout = "circular"),as.data.frame(regentrans::locs), color = NA) + title("Phylogenetic Tree Annotated by Location")
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
pat_flow <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(pat_flow) <- c("source_facil", "dest_facil", "n_transfers")
pat_flow$n_transfers <- as.numeric(pat_flow$n_transfers)
pat_flow
pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = snv_dists)
pt_trans
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point()
snv_dists
#for now
mat <- data.frame(matrix(data = c(0, 20, 30, 40,
20, 0, 26, 50,
30, 26, 0, 57,
40, 50, 57, 0), nrow = 4, ncol = 4))
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("A", "B", "C", "D")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = snv_dists)
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point()
pt_trans
pat_flow
pt_trans <- patient_transfer(pt_trans_net = test_pt_trans_net, snv_dists = snv_dists)
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point()
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point(color = "blue", alpha = 0.2) + labs(y = "Number of Patient Transfers from Facility \nvs. Number of Closely Related Isolate Pairs at Facility", x = "Number of Transfers", title = "Number of Closely Related Isolate Pairs")
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point(color = "blue", alpha = 0.5) + labs(y = "Number of Patient Transfers from Facility \nvs. Number of Closely Related Isolate Pairs at Facility", x = "Number of Transfers", title = "Number of Closely Related Isolate Pairs")
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_point(color = "blue", alpha = 0.5) + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers from Facility \nvs. Number of Closely Related Isolate Pairs at Facility")
?get_clusters()
frac_intra
snv_dists
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1) %>% summarize(n = n())
cutoff <- 20
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1) %>% summarize(n = n())
snv_dists
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()) %>% ggplot(aes(x = Loc1, y = n)) %>% geom_point(alpha = .5, fill = Pair_Type)
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()) %>% ggplot(aes(x = Loc1, y = n, color = Pair_Type)) %>% geom_point(alpha = .5)
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()) %>% ggplot(aes(x = Loc1, y = n, color = Pair_Type)) + geom_point(alpha = .5)
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()) %>% ggplot(aes(x = Loc1, y = n, color = Pair_Type)) + geom_point(alpha = .5) + labs(y = "Number of Closely Related Isolate Pairs", x = "Facility ID", title = "Number of Closely Related Isolate Pairs by Facility")
