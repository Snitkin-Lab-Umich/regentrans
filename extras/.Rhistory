#names(locs) <- metadata$gID
#pt
#pt <- metadata$pt_id
#names(pt) <- metadata$gID
#for the test data I have to remove the last char of each of the row and col names
#rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
#colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
##########################################################
###################penn data prep#########################
#metadata path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Analysis/regentrans_data/2021-02-16_subset-data/data/ltach-metadata.csv
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Analysis/regentrans_data/2021-02-16_subset-data/data/ltach-metadata.csv")
#alignment path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta",
format = "fasta")
#tree path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/iqtree_masked_wga/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/iqtree_masked_wga/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
#pt
pt <- metadata$patient_id
names(pt) <- paste0("PCMP_H", metadata$isolate_no)
##########################################################
#############################################################################################################################################
#prep for the get_snv_dists function
#dists - snv distance matrix returned by dist.dna
#use as.matrix = true for the dist.dna function
dists <- dist.dna(x = fasta, as.matrix = TRUE, model = "N")
isolates <- intersect(names(locs), rownames(fasta))
fasta_backup <- fasta
fasta<-fasta[isolates,]
fasta
locs <- locs[isolates]
locs <- locs[order(match(names(locs),rownames(fasta)))]
rownames(fasta) <- unname(locs)
fasta
sample_locs = rownames(fasta)
locs = unique(unname(locs))
facil_dist = matrix(0, ncol = length(locs), nrow = length(locs), dimnames = list(locs, locs))
for(f1 in locs){
for(f2 in locs){
if (f1 == f2) {next}
#subset fasta file to just that those locations
subset_snp_mat = fasta[sample_locs %in% c(f1, f2), ]
#columns
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
subset_f1 = rownames(subset_snp_mat) %in% f1 #substr(sapply(rownames(subset_snp_mat), FUN = function(x){strsplit(x, "-")[[1]][2]}), 1, 1) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2 #substr(sapply(rownames(subset_snp_mat), FUN = function(x){strsplit(x, "-")[[1]][2]}), 1, 1) %in% f2
#BETWEEN POPLUATION VARIATION
between = apply(subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0} else{
f1_allele1 = sum(as.character(x)[subset_f1] %in% alleles[1])/sum(subset_f1)
f1_allele2 = sum(as.character(x)[subset_f1] %in% alleles[2])/sum(subset_f1)
f2_allele1 = sum(as.character(x)[subset_f2] %in% alleles[1])/sum(subset_f2)
f2_allele2 = sum(as.character(x)[subset_f2] %in% alleles[2])/sum(subset_f2)
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
between_sum = sum(between)
#WITHIN POPULATION 1 VARIATION
f1_subset_snp_mat = subset_snp_mat[subset_f1,apply(subset_snp_mat[subset_f1,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f1 = apply(f1_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f1_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f1_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f1_allele1 * f1_allele2)^2
}
})
within_f1_sum = sum(within_f1)
#WITHIN POPULATION 2 VARIATION
f2_subset_snp_mat = subset_snp_mat[subset_f2,apply(subset_snp_mat[subset_f2,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f2 = apply(f2_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f2_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
f2_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
(f2_allele1 * f2_allele2)^2}
})
within_f2_sum = sum(within_f2)
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
facil_dist[f1,f2] = Fsp
}#end loop 1
}#end loop 2
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
Penn_test_input <- readRDS(file = "/Users/sophiehoffman/Desktop/regentrans/extras/Penn_test_input.rds")
locs <- Penn_test_input$locs
pt <- Penn_test_input$pt
fasta <- Penn_test_input$fasta
dists <- Penn_test_input$dists
snv_dists <- get_snv_dists(dists, locs, pt)
snv_dist_no_pt <- get_snv_dists(dists, locs)
frac_intra <- get_frac_intra(snv_dists)
View(snv_dists)
threshs <- seq(0,100,19041)
seq
?seq
threshs <- seq(0,19041, by=100)
frac_intra <- get_frac_intra(snv_dists, threshs)
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
View(frac_intra)
is.null(snv_dists) & is.null(dists) & is.null(locs)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
threshs <- seq(0,19041, by=100)
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
run_snv_dists <- check_get_frac_intra_input(snv_dists = snv_dists, threshs = threshs, dists = dists, locs = locs, pt = pt)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
}))
View(intra_cts)
i = 1
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i & !is.na(snv_dists$Pair_Type)]
im <- c(i,
table(factor(Pair_Type,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(Pair_Type == 'Intra-facility pair'),2),
round(mean(Pair_Type == 'Inter-facility pair'),2))
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i & !is.na(snv_dists$Pair_Type)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i & !is.na(snv_dists$Pair_Type)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
}))
threshs
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i & !is.na(snv_dists$Pair_Type)]
intra
i
i = threshs[1]
i
snv_dists$Pairwise_Dists < i
!is.na(snv_dists$Pair_Type)
snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
snv_dists$Pair_Type
snv_dists$Pairwise_Dists < i
i = threshs[2]
i
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
intra
snv_dists$Pair_Type
snv_dists$Pairwise_Dists < i
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair')))
round(mean(intra == 'Intra-facility pair'),2)
round(mean(intra == 'Inter-facility pair'),2))
round(mean(intra == 'Inter-facility pair'),2)
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
i = threshs[3]
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
table(snv_dists$Pairwise_Dists)
threshs <- seq(0,19041, by=1)
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
View(frac_intra)
threshs
intra_cts <- t(sapply(threshs, function(i){print(i)}))
i = threshs[2]
i
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
intra
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
i = threshs[2]
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
snv_dists$Pairwise_Dists < i
snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
snv_dists[snv_dists$Pairwise_Dists < i]
i = threshs[1]
i
i
snv_dists$Pairwise_Dists <= i
snv_dists$Pair_Type[snv_dists$Pairwise_Dists <= i]
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists <= i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
nnn
nn
nj
q
dfgd
>>>
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists <= i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
im
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
#names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
#im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
#im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
#im
}))
rownames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
View(intra_cts)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$Pair_Type[snv_dists$Pairwise_Dists < i]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
im
}))
colnames(intra_cts) <- c('Thresh','n_Inter','n_Intra','Frac_Intra','Frac_Inter')
View(intra_cts)
threshs <- seq(1,19041, by=1)
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
View(frac_intra)
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
View(frac_intra)
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt, threshs = threshs)
View(frac_intra_2)
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt, threshs = threshs)
cat("Running get_snv_dists")
?tree_subset
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/iqtree_masked_wga/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
tr$tip.label
tr <- tree
tr$tip.label
?subtrees
library(treeio)
?tree_subset
?drop.tip
?keep.tip
names(locs)
tr_subset <- keep.tip(tr,names(locs))
View(tr)
tr$tip.label == names(locs)
length(intersect(names(locs), tr_subset$tip.label))
length(tr$tip.label)
length(tr_subset$tip.label)
View(tr_subset)
Penn_test_input <- list("locs" = locs, "pt" = pt, "fasta" = fasta, "dists" = dists, "tr" = tr_subset)
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans/extras")
saveRDS(Penn_test_input, file = "Penn_test_input_2.rds")
#test read back in
Penn_test_input <- readRDS(file = "/Users/sophiehoffman/Desktop/regentrans/extras/Penn_test_input_2.rds")
locs <- Penn_test_input$locs
pt <- Penn_test_input$pt
fasta <- Penn_test_input$fasta
dists <- Penn_test_input$dists
tr <- Penn_test_input$tr
View(tr)
source("/Users/sophiehoffman/Desktop/regentrans/R/get_clusters.R")
clusters <- get_clusters(tr,locs)
clusters <- get_clusters(tr,locs)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
clusters <- get_clusters(tr,locs)
pure_subtree_info <- clusters$pure_subtree_info
subtrees <- clusters$subtrees
cluster_pureness <- clusters$cluster_pureness
View(pure_subtree_info)
source("/Users/sophiehoffman/Desktop/regentrans/R/get_facility_fsp.R")
fsp <- get_facility_fsp(fasta,locs)
fsp <- get_facility_fsp(fasta,locs)
fsp <- get_facility_fsp(fasta,locs)
locs %in% common_isolates
names(locs) %in% common_isolates
which(unlist(table(locs[names(locs) %in% common_isolates])
)
)
locs[names(locs) %in% common_isolates]
table(locs[names(locs) %in% common_isolates])
which(unlist(table(locs[names(locs) %in% common_isolates]) > 1)))
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
fsp <- get_facility_fsp(fasta,locs)
View(fsp)
check_facility_fsp(fasta, locs)
which(unlist(table(locs) > 1))
table(locs)
(table(locs) > 1)
which(unlist(table(locs) > 1))
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
locs_subset
isolates <- intersect(names(locs_subset), rownames(fasta))
fasta_sub<-fasta[isolates,]
locs_subset <- locs_subset[isolates]
locs_subset <- locs_subset[order(match(names(locs_subset),rownames(fasta_sub)))]
rownames(fasta_sub) <- unname(locs_subset)
sample_locs = rownames(fasta_sub)
locs_unique = unique(unname(locs_subset))
locs_unique
sample_locs
locs_unique[1]
f1 = locs_unique[1]
f2 = locs_unique[2]
f2
f1 == f2
subset_snp_mat = fasta_sub[sample_locs %in% c(f1, f2), ]
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2
?apply
subset_snp_mat[,1]
x = subset_snp_mat[,1]
alleles = names(table(as.character(x)))
length(alleles) > 2
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
allele_freq_btwn <- function(x, subset, allele_n){
return(sum(as.character(x)[subset] %in% alleles[allele_n])/sum(subset))
}
allele_freq_within <- function(x, allele_n){
return(sum(as.character(x) %in% alleles[allele_n])/length(x))
}
within_pop_var <- function(subset_snp_mat, subset){
f_subset_snp_mat = subset_snp_mat[subset,apply(subset_snp_mat[subset,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f = apply(f_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f_allele1 = allele_freq_within(x, 1)
f_allele2 = allele_freq_within(x, 2)
(f_allele1 * f_allele2)^2}
})
return(sum(within_f))
}
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2)
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2)
#calculate between pop variation for each allele site?
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
f1_allele1 = sum(as.character(x)[subset_f1] %in% alleles[1])/sum(subset_f1)
f1_allele2 = sum(as.character(x)[subset_f1] %in% alleles[2])/sum(subset_f1)
sum(as.character(x)[subset_f2] %in% alleles[1])/sum(subset_f2)
sum(as.character(x)[subset_f2] %in% alleles[2])/sum(subset_f2)
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
#subset to first location
f1_subset_snp_mat = subset_snp_mat[subset_f1,apply(subset_snp_mat[subset_f1,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#same as above
within_f1 = apply(f1_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
# f1_allele1 = sum(as.character(x) %in% alleles[1])/length(x)
# f1_allele2 = sum(as.character(x) %in% alleles[2])/length(x)
f1_allele1 = allele_freq_within(x, 1)
f1_allele2 = allele_freq_within(x, 2)
(f1_allele1 * f1_allele2)^2
}
})
within_f1_sum = sum(within_f1)
within_f2_sum <- within_pop_var(subset_snp_mat, subset_f2)
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
ubset_snp_mat = fasta_sub[sample_locs %in% c(f1, f2), ]
#make sure the position is not all unknown or no variance, subset to the ones that have some variation
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#figure out which are from each facility
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2
#BETWEEN POPLUATION VARIATION
#for each position
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2)
#calculate between pop variation for each allele site?
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
#WITHIN POPULATION 1 VARIATION
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
#WITHIN POPULATION 2 VARIATION
within_f2_sum <- within_pop_var(subset_snp_mat, subset_f2)
#calculate Fsp
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
within_f1_sum
within_f2_sum
between_sum
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2)
#calculate between pop variation for each allele site?
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
source("/Users/sophiehoffman/Desktop/regentrans/R/get_facility_fsp.R")
fsp <- get_facility_fsp(fasta,locs)
View(fsp)
fsp <- get_facility_fsp(fasta,locs)
