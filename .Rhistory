dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
test <- snv_dists %>%
#filter to pairs under the threshold
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n(as.numeric(Pairwise_Dists) <= thresh)) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
test <- snv_dists %>%
mutate(Pairwise_Dists = as.numeric(Pairwise_Dists)) %>%
#filter to pairs under the threshold
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n(Pairwise_Dists <= thresh)) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
test <- snv_dists %>%
mutate(Pairwise_Dists = as.numeric(Pairwise_Dists)) %>%
#filter to pairs under the threshold
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
View(test)
devtools::load_all()
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
cbind(locs, pt)
cbind(locs, pt) %>% unique()
cbind(locs, pt) %>% unique() %>% length()
cbind(locs, pt) %>% length()
cbind(locs, pt) %>% unique()
cbind(locs, pt) %>% unique() %>% rownames()
isolate_subset <- cbind(locs, pt) %>% unique() %>% rownames()
locs[isolate_subset]
isolate_subset <- cbind(locs, pt) %>% unique() %>% rownames()
length(locs[isolate_subset])
isolate_subset <- cbind(locs, pt) %>% unique() %>% rownames()
locs <- locs[isolate_subset]
pt <- pt[isolate_subset]
dates <- dates[isolate_subset]
st <- st[isolate_subset]
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists_sub <- subset_pairs(snv_dists)
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4, binwidth = 1) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs \n< 20 SNV Distance")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = dists, locs = locs, pt = pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from the Same \nFacility at Each SNV Distance Threshold") + ylim(0, 1)
clusters <- get_clusters(tr,locs, pureness = 1)
#dissect output
pure_subtree_info <- clusters$pure_subtree_info
subtrees <- clusters$subtrees
ggplot(data = pure_subtree_info, aes(x = f_id, y = subtr_size)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Isolates in \nPhylogenetic Cluster", x = "Facility ID", title = "Pure Subtree Information")
snv_dists_sub
snv_dists_sub %>% left_join(as.data.frame(dates))
as.data.frame(dates)
as.table(dates)
as.matrix(dates)
as_tibble(dates)
as_data_frame(dates)
as.data.frame(dates)
snv_dists_sub
snv_dists_sub %>% left_join(as.data.frame(dates), by = c("rownames()" = "Isolate1"))
as.data.frame(dates) %>% mutate(Isolate.ID = rownames())
enframe(dates)
tidyr::enframe(dates)
dplyr::enframe(dates)
tidyverse::enframe(dates)
bind_rows(dates)
bind_rows(dates) %>% t()
bind_cols(dates)
dates_df <- bind_cols(dates, names(dates))
dates_df
dates_df <- cbind(names(dates), dates)
dates_df
dates
dates_df <- bind_cols(names(dates), dates)
dates_df
snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("...1" = "Isolate1"))
snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1"))
snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2") %>%
ggplot() +
geom_histogram(data = subset(Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs") #+ facet_wrap()
snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
snv_dists_sub_dates <- snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs") #+ facet_wrap()
snv_dists_sub_dates
snv_dists_sub_dates <- snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs") + facet_wrap(~date)
snv_dists_sub_dates <- snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs") + facet_wrap(~date)
snv_dists_sub_dates <- snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs") + facet_wrap(~date)
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs\n by Date of Isolate Collection") + facet_wrap(~date)
snv_dists_sub_dates <- snv_dists_sub %>% left_join(bind_cols(names(dates), dates), by = c("Isolate1" = "...1")) %>% rename("date" = "...2")
ggplot() +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub_dates,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs \nby Date of Isolate Collection") + facet_wrap(~date)
Fsp <- regentrans::Fsp
pheatmap(Fsp)
locs
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
cities <- force(us.cities) %>% filter(!country.etc %in% c("HI", "AK"))
facilities <- unique(locs)
cities_sub <- cities[1:length(facilities),4:5]
facil_coord <- as.data.frame(cbind(facilities, cities_sub))
head(facil_coord)
facil_coord %>% left_join(loc_n)
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo
loc_n
facil_geo
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
size = (1/Fsp_val)),
data = Fsp_geo, curvature = 0.33,
alpha = 0.2) +
theme_void() + theme(legend.position = "none")
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat),
data = Fsp_geo, curvature = 0.33,
alpha = (1/Fsp_val)) +
theme_void() + theme(legend.position = "none")
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
alpha = (1/Fsp_val)),
data = Fsp_geo, curvature = 0.33) +
theme_void() + theme(legend.position = "none")
pt_trans
facil_geo
Fsp %>% long_form() %>% subset_pairs()
facil_geo
Fsp %>% long_form() %>% subset_pairs()
facil_geo
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
Fsp_geo
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
alpha = (1/Fsp_val)),
data = Fsp_geo, curvature = 0.33) +
theme_void() + theme(legend.position = "none")
snv_dists
snv_dist_summary <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2)
snv_dist_summary
Fsp
Fsp %>% long_form() %>% subset_pairs()
snv_geo <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2) %>% left_join(facil_geo, by = c("Loc1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Loc2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
snv_geo
thresh = 10
snv_dist_summary <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2)
snv_geo <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2) %>% left_join(facil_geo, by = c("Loc1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Loc2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
alpha = n_closely_related_pairs)),
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat, alpha = n_closely_related_pairs)), data = snv_geo, curvature = 0.33) + theme_void() + theme(legend.position = "none")
snv_geo
thresh = 10
snv_dist_summary <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2)
snv_geo <- snv_dists %>% dplyr::group_by(Loc1, Loc2) %>% dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>% dplyr::filter(Loc1 != Loc2) %>% left_join(facil_geo, by = c("Loc1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Loc2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
alpha = n_closely_related_pairs),
data = snv_geo, curvature = 0.33) +
theme_void() + theme(legend.position = "none")
tr_sub <- ape::keep.tip(tr, names(locs))
mpr_tree = midpoint.root(tr_sub)
gheatmap(ggtree(mpr_tree, layout = "circular"),as.data.frame(locs), color = NA)
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair")
pt_trans
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = data = subset(pt_trans,n_closely_related_pairs > 0), mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = subset(pt_trans, n_closely_related_pairs > 0), mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
devtools::load_all()
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
pt_trans_net
pt_trans_net <- pt_flow
pt_trans_net
#make matrix format
trans_mat <- tidyr::pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
trans_mat
trans_mat <- as.data.frame(trans_mat[,2:ncol(trans_mat)])
trans_mat
rownames(trans_mat) <- colnames(trans_mat)
trans_mat
#make graph
g <- graph_from_adjacency_matrix(as.matrix(trans_mat),mode='directed',weighted = TRUE)
library(igraph)
#make graph
g <- igraph::graph_from_adjacency_matrix(as.matrix(trans_mat),mode='directed',weighted = TRUE)
g
View(g)
g[[1]]
g[[2]]
g[[3]]
g[[3]][1]
g[[3]][2]
#find shortest path function -> igraph::shortest.paths()
sp <- igraph::shortest.paths(g)
View(sp)
View(trans_mat)
E(graph)
E(g)
E(g)$weight
E(g)$width
V(g)$size
hist(E(simplify(g))$weight,breaks=100)
plot(simplify(g),vertex.label=V(g)$labels,edge.arrow.size=0.05,layout=layout_(g,with_fr()),
vertex.label.cex=0.5,vertex.frame.color=NA,vertex.color='orange',
edge.color='grey',edge.width=E(g)$width/1000)
tail_of(g,E(g))
#modify edge weights from n facilities -> normalize/invert
tail_vert = tail_of(g,E(g)) # get tail (source) vertex for each edge
edwt_sum = sapply(names(tail_vert), function(x) out_strength[names(out_strength) == x]) # get number of outgoing patient transfers of tail vertex for each edge
strength(g,mode='out')
#modify edge weights from n facilities -> normalize/invert
out_strength = strength(g,mode='out') # get number of outgoing patient transfers for each vertex
tail_vert = tail_of(g,E(g)) # get tail (source) vertex for each edge
edwt_sum = sapply(names(tail_vert), function(x) out_strength[names(out_strength) == x]) # get number of outgoing patient transfers of tail vertex for each edge
E(g)$weight_norm = -log10(E(g)$weight/edwt_sum) # normalize edge weight by number of outgoing patient transfers of source vertex and take negative log (to use to calculate shortest paths)
E(g)$weight_norm
E(g)$weight_norm_nolog = E(g)$weight/edwt_sum
E(g)$weight_norm_nolog
E(g)
E(g)$weight
sp
E(g)$weight = -log10(E(g)$weight/edwt_sum) # normalize edge weight by number of outgoing patient transfers of source vertex and take negative log (to use to calculate shortest paths)
#find shortest path function -> igraph::shortest.paths()
sp <- igraph::shortest.paths(g)
sp
pivot_longer(sp)
tidyr::pivot_longer(sp)
class(sp)
sp
View(sp)
sp %>% as_tibble()
#make long form
sp$source <- rownames(sp)
sp$source
#find shortest path function -> igraph::shortest.paths()
sp <- igraph::shortest.paths(g)
class(sp)
#make long form
sp %>% as.data.frame(sp)
sp%>% as_tibble() %>% mutate(source = colnames())
sp %>% as_tibble() %>% mutate(source = `colnames()`)
sp %>% as_tibble() %>% mutate(source = colnames(sp))
sp %>% as_tibble() %>% mutate(source = colnames(sp))
sp %>% as_tibble() %>% mutate(source = colnames(sp))
sp %>% as_tibble() %>% mutate(source = colnames(sp)) %>% tidyr::pivot_longer(!source, names_to = "dest", values_to = "pt_trans_metric")
trans_net_i <- sp %>% as_tibble() %>% mutate(source_facil = colnames(sp)) %>% tidyr::pivot_longer(!source_facil, names_to = "dest_facil", values_to = "pt_trans_metric")
trans_net_i
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
isolate_subset <- cbind(locs, pt) %>% unique() %>% rownames()
locs <- locs[isolate_subset]
pt <- pt[isolate_subset]
dates <- dates[isolate_subset]
st <- st[isolate_subset]
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists_sub <- subset_pairs(snv_dists)
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
View(pt_trans)
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
isolate_subset <- cbind(locs, pt) %>% unique() %>% rownames()
locs <- locs[isolate_subset]
pt <- pt[isolate_subset]
dates <- dates[isolate_subset]
st <- st[isolate_subset]
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists
pt_trans_net <- pt_flow
dists = NULL
locs = NULL
pt = NULL
thresh = 10
paths = FALSE
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh, paths = paths)
#make pt_trans_net not factors
pt_trans_net$source_facil <- as.character(pt_trans_net$source_facil)
pt_trans_net$dest_facil <- as.character(pt_trans_net$dest_facil)
#run get_snv_dists if necessary
if(run_snv_dists){
cat("Running get_snv_dists...")
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
}
#run indirect flow
ind_flow_output <- indirect_flow(pt_trans_net)
pt_trans_net_i <- ind_flow_output$transfer_network
paths_list <- ind_flow_output$paths
#subset to only facilities in the locs object
common_locs <- intersect(unique(c(snv_dists$Loc1, snv_dists$Loc2)), unique(c(pt_trans_net$source_facil, pt_trans_net$dest_facil)))
pt_trans_net <- pt_trans_net %>% dplyr::filter(source_facil %in% common_locs,
dest_facil %in% common_locs)
snv_dists <- snv_dists %>% dplyr::filter(Loc1 %in% common_locs,
Loc2 %in% common_locs)
#remove any same-facility pairs
pat_flow <- dplyr::bind_cols(pt_trans_net %>% filter(source_facil != dest_facil))
#instead of all of that we will just left join
pt_trans_summary <- snv_dists %>%
mutate(Pairwise_Dists = as.numeric(Pairwise_Dists)) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers") %>%
#add in indirect flow 1 to 2
dplyr::left_join(pt_trans_net_i, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("indirect_flow_metric_1_to_2" = "pt_trans_metric") %>%
#add in indirect flow 2 to 1
dplyr::left_join(pt_trans_net_i, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("indirect_flow_metric_2_to_1" = "pt_trans_metric")
View(pt_trans_summary)
#make df
pt_trans_summary <- as.data.frame(pt_trans_summary)
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(avg_direct_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE), avg_indirect_flow = rowMeans(select(., dplyr::starts_with("indirect")), na.rm = TRUE))
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_flow_undirected, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = avg_indirect_flow, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = avg_direct_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = avg_direct_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
devtools::check()
getwd()
cd("/Users/sophiehoffman/Desktop/regentrans")
setwd("/Users/sophiehoffman/Desktop/regentrans/")
devtools::check()
warnings()
