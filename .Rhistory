)
#check form input
expect_error(
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "hi"),
"form must be either 'long' or 'matrix' to determine output format, you have provided hi",
fixed = TRUE
)
expect_error(
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = 12),
"form must be either 'long' or 'matrix' to determine output format, you have provided 12",
fixed = TRUE
)
#check fasta
expect_error(
check_facility_fsp_input(fasta = "test_fasta", locs = test_locs, form = "matrix"),
"The fasta object must be of class DNAbin, you have supplied an object of class  character",
fixed = TRUE
)
#check fasta vs. locs when they don't have 2 in common
expect_error(
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_6, form = "matrix"),
"Please provde a fasta object and locs object with at least two samples in common",
fixed = TRUE
)
#when not two isolates in two facilities
expect_error(
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_7, form = "matrix"),
"Please provide isolates that appear in a facility at least twice, you have not provided locs of at least two isolates in two facilities",
fixed = TRUE
)
#check fasta vs. locs when you have to subset
expect_warning(
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_8, form = "matrix"),
"You have provided  5  isolate IDs in common between locs and your fasta. Will subset.",
fixed = TRUE
)
#one where there's only isolate from a location and will subset
expect_warning(
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_9, form = "matrix"),
"You have provided at least one isolate that is the only one in its location. Will subset to exclude location  1",
fixed = TRUE
)
test_locs_9
test_locs_7
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_7, form = "matrix")
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_9, form = "matrix")
test_locs_9
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_8, form = "matrix")
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_9, form = "matrix")
#check fasta vs. locs when you have to subset
expect_warning(
check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_9, form = "matrix"),
"You have provided  6  isolate IDs in common between locs and your fasta. Will subset.",
fixed = TRUE
)
#one where there's only isolate from a location and will subset
expect_warning(
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_8, form = "matrix"),
"You have provided at least one isolate that is the only one in its location. Will subset to exclude location  1",
fixed = TRUE
)
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_8, form = "matrix")
test_fasta_3 <- fasta[names(test_locs_8),]
#one where there's only isolate from a location and will subset
expect_warning(
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_8, form = "matrix"),
"You have provided at least one isolate that is the only one in its location. Will subset to exclude location  1",
fixed = TRUE
)
source('~/Desktop/regentrans/tests/testthat/test-checks.R', echo=TRUE)
test()
##################################test get_frac_intra#####################################
test_that("check_get_frac_intra_input works", {
#normal one that works with snv_dists input
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#normal one that works without snv_dists input
expect_true(check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = NULL))
#one that's input isn't snv_dists input at all
expect_error(
check_get_frac_intra_input(snv_dists = "test_snv_dists", threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but you provided:  character",
fixed = TRUE
)
#one that's input is similar but wrong # cols
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_2, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  7  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not correct rownames
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_3, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  8  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not numeric dist col
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_4, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"Your snv_dists input does not have numeric pairwise distances, you supplied one with type character",
fixed = TRUE
)
#one that's input doesn't work for get_snv_dists
expect_error(
check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = "test_dists", locs = test_locs, pt = test_pt, pt_trans_net = NULL),
"The dists object must be a SNV distance matrix returned by the dist.dna function from the ape package, but you provided: character",
fixed = TRUE
)
#one where threshs isn't a numeric vector
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists, threshs = "seq(1,50,1)", dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"threshs must be a numeric vector, you provided a  character",
fixed = TRUE
)
#one with patient transfer network snv_dists
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#one with patient transfer network no snv_dists
expect_true(check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net))
})
#normal one that works with snv_dists input
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
##################################test get_frac_intra#####################################
test_that("check_get_frac_intra_input works", {
#normal one that works with snv_dists input
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#normal one that works without snv_dists input
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = NULL))
#one that's input isn't snv_dists input at all
expect_error(
check_get_frac_intra_input(snv_dists = "test_snv_dists", dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but you provided:  character",
fixed = TRUE
)
#one that's input is similar but wrong # cols
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_2, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  7  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not correct rownames
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_3, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  8  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not numeric dist col
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_4, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"Your snv_dists input does not have numeric pairwise distances, you supplied one with type character",
fixed = TRUE
)
#one that's input doesn't work for get_snv_dists
expect_error(
check_get_frac_intra_input(snv_dists = NULL, dists = "test_dists", locs = test_locs, pt = test_pt, pt_trans_net = NULL),
"The dists object must be a SNV distance matrix returned by the dist.dna function from the ape package, but you provided: character",
fixed = TRUE
)
#one where threshs isn't a numeric vector
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"threshs must be a numeric vector, you provided a  character",
fixed = TRUE
)
#one with patient transfer network snv_dists
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#one with patient transfer network no snv_dists
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net))
})
#normal one that works with snv_dists input
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#normal one that works without snv_dists input
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = NULL))
#one that's input isn't snv_dists input at all
expect_error(
check_get_frac_intra_input(snv_dists = "test_snv_dists", dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but you provided:  character",
fixed = TRUE
)
#one that's input is similar but wrong # cols
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_2, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  7  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not correct rownames
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_3, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  8  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not numeric dist col
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_4, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"Your snv_dists input does not have numeric pairwise distances, you supplied one with type character",
fixed = TRUE
)
#one that's input doesn't work for get_snv_dists
expect_error(
check_get_frac_intra_input(snv_dists = NULL, dists = "test_dists", locs = test_locs, pt = test_pt, pt_trans_net = NULL),
"The dists object must be a SNV distance matrix returned by the dist.dna function from the ape package, but you provided: character",
fixed = TRUE
)
#one where threshs isn't a numeric vector
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"threshs must be a numeric vector, you provided a  character",
fixed = TRUE
)
#one with patient transfer network snv_dists
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#one with patient transfer network no snv_dists
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net))
##################################test get_frac_intra#####################################
test_that("check_get_frac_intra_input works", {
#normal one that works with snv_dists input
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#normal one that works without snv_dists input
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = NULL))
#one that's input isn't snv_dists input at all
expect_error(
check_get_frac_intra_input(snv_dists = "test_snv_dists", dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but you provided:  character",
fixed = TRUE
)
#one that's input is similar but wrong # cols
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_2, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  7  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not correct rownames
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_3, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"The snv_dists object must be the output of the get_snv_dists() function, but the data.frame you provided has  8  columns that are not the output columns needed.",
fixed = TRUE
)
#one that's input is similar but not numeric dist col
expect_error(
check_get_frac_intra_input(snv_dists = test_snv_dists_4, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL),
"Your snv_dists input does not have numeric pairwise distances, you supplied one with type character",
fixed = TRUE
)
#one that's input doesn't work for get_snv_dists
expect_error(
check_get_frac_intra_input(snv_dists = NULL, dists = "test_dists", locs = test_locs, pt = test_pt, pt_trans_net = NULL),
"The dists object must be a SNV distance matrix returned by the dist.dna function from the ape package, but you provided: character",
fixed = TRUE
)
#one with patient transfer network snv_dists
expect_false(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, dists = NULL, locs = NULL, pt = NULL, pt_trans_net = NULL))
#one with patient transfer network no snv_dists
expect_true(check_get_frac_intra_input(snv_dists = NULL, dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net))
})
source('~/Desktop/regentrans/tests/testthat/test-checks.R', echo=TRUE)
test()
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
View(get_frac_intra)
test_snv_dists
?pivot_wider
intra_cts <- snv_dists %>%
dplyr::group_by(Pair_Type, Pairwise_Dists) %>%
mutate(Pair_Type = factor(Pair_Type, levels = c('Intra-facility pair','Inter-facility pair')))
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
?summarize
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check that n rows matches threshs
expect_true(nrow(test_frac_intra) <= length(test_threshs))
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check colnames
expect_true(all(colnames(test_frac_intra) == c('n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
?expand
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
snv_dists %>%
dplyr::group_by(Pair_Type, Pairwise_Dists) %>%
mutate(Pair_Type = factor(Pair_Type, levels = c('Intra-facility pair','Inter-facility pair'))) %>%
dplyr::count(.drop = FALSE)
intra_cts <- snv_dists %>%
dplyr::group_by(Pair_Type, Pairwise_Dists) %>%
mutate(Pair_Type = factor(Pair_Type, levels = c('Intra-facility pair','Inter-facility pair'))) %>%
dplyr::count(.drop = FALSE) %>%
tidyr::pivot_wider(names_from = Pair_Type, values_from = n) %>%
dplyr::mutate(Frac_Intra = ifelse('Intra-facility pair' %in% colnames(.),
`Intra-facility pair`/(`Intra-facility pair`+`Inter-facility pair`),
0),
Frac_Inter = 1 - Frac_Intra)
intra_cts
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
intra_cts <- snv_dists %>%
dplyr::group_by(Pair_Type, Pairwise_Dists) %>%
mutate(Pair_Type = factor(Pair_Type, levels = c('Intra-facility pair','Inter-facility pair'))) %>%
dplyr::count(.drop = FALSE) %>%
tidyr::pivot_wider(names_from = Pair_Type, values_from = n) %>%
dplyr::mutate(Frac_Intra = ifelse('Intra-facility pair' %in% colnames(.),
`Intra-facility pair`/(`Intra-facility pair`+`Inter-facility pair`),
0),
Frac_Inter = 1 - Frac_Intra,
`Intra-facility pair` = ifelse('Intra-facility pair' %in% colnames(.), `Intra-facility pair`, 0),
`Inter-facility pair` = ifelse('Inter-facility pair' %in% colnames(.), `Intra-facility pair`, 0))
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans_net <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_frac_intra_pt_trans_net <- get_frac_intra(snv_dists = test_snv_dists_pt_trans_net)
test_that("get_frac_intra works", {
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
expect_true(all((test_frac_intra$Frac_inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra$Thresh, test_threshs)) == nrow(test_frac_intra))
#check it works with the input with pt trans net
#check n cols
expect_true(ncol(test_frac_intra_pt_trans_net) == 5)
#check that n rows matches threshs
expect_true(nrow(test_frac_intra_pt_trans_net) <= length(test_threshs))
#check colnames
expect_true(all(colnames(test_frac_intra_pt_trans_net) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0))
expect_true(all((test_frac_intra_pt_trans_net$Frac_inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra_pt_trans_net$Thresh, test_threshs)) == nrow(test_frac_intra_pt_trans_net))
})
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
load_all()
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
expect_true(all((test_frac_intra$Frac_inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_inter == 0))
test_frac_intra
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_inter == 0))
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0))
test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
test_frac_intra$Frac_Inter
test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)
test_frac_intra$n_Intra + test_frac_intra$n_Inter
test_frac_intra$n_Inter
test_frac_intra
'Inter-facility pair' %in% colnames(.)
load_all()
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
test_frac_intra
load_all()
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
test_frac_intra
load_all()
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists)
test_frac_intra
test_that("get_frac_intra works", {
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra$Thresh, test_threshs)) == nrow(test_frac_intra))
#check it works with the input with pt trans net
#check n cols
expect_true(ncol(test_frac_intra_pt_trans_net) == 5)
#check that n rows matches threshs
expect_true(nrow(test_frac_intra_pt_trans_net) <= length(test_threshs))
#check colnames
expect_true(all(colnames(test_frac_intra_pt_trans_net) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0))
expect_true(all((test_frac_intra_pt_trans_net$Frac_inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra_pt_trans_net$Thresh, test_threshs)) == nrow(test_frac_intra_pt_trans_net))
})
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra$Thresh, test_threshs)) == nrow(test_frac_intra))
#check it works with the input with pt trans net
#check n cols
expect_true(ncol(test_frac_intra_pt_trans_net) == 5)
#check that n rows matches threshs
expect_true(nrow(test_frac_intra_pt_trans_net) <= length(test_threshs))
#check colnames
expect_true(all(colnames(test_frac_intra_pt_trans_net) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check colnames
expect_true(all(colnames(test_frac_intra_pt_trans_net) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0))
#check types of all cols
expect_true(all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
test_frac_intra_pt_trans_net
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
#check n cols
expect_true(ncol(test_frac_intra) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra$Frac_Intra == test_frac_intra$n_Intra/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Intra == 0))
expect_true(all((test_frac_intra$Frac_Inter == test_frac_intra$n_Inter/(test_frac_intra$n_Intra + test_frac_intra$n_Inter)) | test_frac_intra$Frac_Inter == 0))
#check it works with the input with pt trans net
#check n cols
expect_true(ncol(test_frac_intra_pt_trans_net) == 5)
#check colnames
expect_true(all(colnames(test_frac_intra_pt_trans_net) == c('Pairwise_Dists','n_Intra','n_Inter','Frac_Intra','Frac_Inter')))
#check types of all cols
expect_true(all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric")))
#check that rows are the divisions of other rows...
expect_true(all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0))
expect_true(all((test_frac_intra_pt_trans_net$Frac_inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_inter == 0))
expect_true(all((test_frac_intra_pt_trans_net$Frac_Inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Inter == 0))
#check that the length of the overlap between threshs and the column is less than or equal nrow
expect_true(length(intersect(test_frac_intra_pt_trans_net$Thresh, test_threshs)) == nrow(test_frac_intra_pt_trans_net))
source('~/Desktop/regentrans/tests/testthat/test-get_frac_intra.R', echo=TRUE)
test()
check()
test_check("regentrans")
source('~/Desktop/regentrans/tests/testthat/test-get_facility_fsp.R', echo=TRUE)
source('~/Desktop/regentrans/tests/testthat/test-subset_pairs.R', echo=TRUE)
