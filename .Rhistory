alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
f1_allele1 = allele_freq_btwn(x, subset_f1, 1)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2)
#calculate between pop variation for each allele site?
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
between_sum
#source get_facility_fsp
source("/Users/sophiehoffman/Desktop/regentrans/R/get_facility_fsp.R")
between = apply(subset_snp_mat, 2, FUN = function(x){
#get alleles present at the site
alleles = names(table(as.character(x)))
#skip multi-allelic sites
if (length(alleles) > 2){0} else{
#find allele frequency for each allele at each site
f1_allele1 = allele_freq_btwn(x, subset_f1, 1, alleles)
f1_allele2 = allele_freq_btwn(x, subset_f1, 2, alleles)
f2_allele1 = allele_freq_btwn(x, subset_f2, 1, alleles)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2, alleles)
#calculate between pop variation for each allele site?
f1_allele1 * f1_allele2 * f2_allele1 * f2_allele2}
})
#sum
between_sum = sum(between)
between_sum
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
within_f1_sum
within_f2_sum <- within_pop_var(subset_snp_mat, subset_f2)
within_f2_sum
Fsp = (((within_f1_sum + within_f2_sum) / 2) - between_sum) / ((within_f1_sum + within_f2_sum) / 2)
Fsp
fsp <- get_facility_fsp(fasta,locs)
View(fsp)
write.csv(fsp, "/Users/sophiehoffman/Desktop/regentrans/extras/Penn_Fsp_output")
write.csv(fsp, "/Users/sophiehoffman/Desktop/regentrans/extras/Penn_Fsp_output.csv", row.names = TRUE, col.names = TRUE, quote = FALSE)
class(new.data_all)
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
#source get_clusters
source("/Users/sophiehoffman/Desktop/regentrans/R/get_clusters.R")
#source get_facility_fsp
source("/Users/sophiehoffman/Desktop/regentrans/R/get_facility_fsp.R")
Penn_test_input <- readRDS(file = "/Users/sophiehoffman/Desktop/regentrans/extras/Penn_test_input_2.rds")
locs <- Penn_test_input$locs
pt <- Penn_test_input$pt
fasta <- Penn_test_input$fasta
dists <- Penn_test_input$dists
tr <- Penn_test_input$tr
class(Penn_test_input)
elementType(Penn_test_input)
sapply(Penn_test_input, class)
z <- list(z1 = list(a = 1, b = 2, c = 3), z2 = list(b = 4, a = 1, c = 0))
sapply(z, class)
unname(sapply(z, class))
unname(sapply(z, class)) == "list"
all(unname(sapply(z, class)) == "list")
!all(unname(sapply(z, class)) == "list")
pureness = 1
bootstrap = NULL
check_get_clusters_inputs(tr, locs, pureness, bootstrap)
isolates <- intersect(tr$tip.label, names(locs))
locs_sub <- locs[isolates]
subtrs_sub <- ape::subtrees(tr)
View(subtrs_sub)
class(subtrs_sub)
!all(unname(sapply(ls, class)) == "phylo")
!all(unname(sapply(subtrs_sub, class)) == "phylo")
unname(sapply(subtrs_sub, class)) == "phylo")
unname(sapply(subtrs_sub, class)) == "phylo"
sapply(subtrs_sub, subtrs_sub$tip.label)
sapply(subtrs_sub, tiplabels)
?tiplabels
sapply(subtrs_sub, $tip.labels)
sapply(subtrs_sub, x$tip.labels)
sapply(subtrs_sub, i$tip.labels)
sapply(subtrs_sub, function(x){x$tip.labels})
sapply(subtrs_sub, function(x){x$tip.labels})
?sapply
c(sapply(subtrs_sub, function(x){x$tip.labels}))
subtrs_sub[[1]]$tip.label
subtrs_sub[[1:length(subtrs_sub)]]$tip.label
subtrs_sub$tip.label
isolates <- ""
for(i in 1:length(subtrs)){
isolates <- c(isolates, subtrs_sub[[i]]$tip.label)
}
isolates <- ""
for(i in 1:length(subtrs_sub)){
isolates <- c(isolates, subtrs_sub[[i]]$tip.label)
}
isolates
isolate_labels = locs_sub
subtrs = subtrs_sub
intersect(isolates, isolate_labels)
isolate_labels
intersect(isolates, names(isolate_labels))
View(tr)
length(intersect(isolates, names(isolate_labels)))
length(isolate_labels)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
clusters <- get_clusters(tr,locs)
clusters <- get_clusters(tr,locs)
clusters <- get_clusters(tr,locs)
clusters <- get_clusters(tr,locs)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
clusters <- get_clusters(tr,locs)
?apply
check_facility_fsp(fasta, locs)
#make a vector of only locs that appear more than once
locs_over_one <- which(unlist(table(locs) > 1))
locs_subset <- locs[locs %in% names(locs_over_one)]
#make a list of the ones they have in common for subsetting
isolates <- intersect(names(locs_subset), rownames(fasta))
#subset the DNAbin object to the samples they have in common
fasta_sub<-fasta[isolates,]
#subset the locs object to the samples they have in common
locs_subset <- locs_subset[isolates]
#order the locs object to match the order of rownames of the fasta
#this might be redundant
locs_subset <- locs_subset[order(match(names(locs_subset),rownames(fasta_sub)))]
#change the rownames of the fasta to the location names
rownames(fasta_sub) <- unname(locs_subset)
#make a list of the location names
sample_locs <- rownames(fasta_sub)
#unique list of locations
locs_unique <- unique(unname(locs_subset))
f1 = locs_unique[1]
f2 = locs_unique[2]
subset_snp_mat = fasta_sub[sample_locs %in% c(f1, f2), ]
#make sure the position is not all unknown or no variance, subset to the ones that have some variation
subset_snp_mat = subset_snp_mat[,apply(subset_snp_mat, 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
#figure out which are from each facility
subset_f1 = rownames(subset_snp_mat) %in% f1
subset_f2 = rownames(subset_snp_mat) %in% f2
subset_snp_mat[,1]
class(subset_snp_mat[,1])
colnames(subset_snp_mat[,1])
class(subset_f1)
x <- subset_snp_mat[,1]
alleles = names(table(as.character(x)))
alleles
class(alleles)
length(alleles)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
f1_allele1 = allele_freq_btwn(x, subset_f1, 1, alleles)
subset_f1
subset_snp_mat
class(subset_snp_mat)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
allele_freq_btwn <- function(x, subset, allele_n, alleles){
#checks
check_allele_freq_input(x, subset, allele_n, alleles)
#calculate
return(sum(as.character(x)[subset] %in% alleles[allele_n])/sum(subset))
}
allele_freq_within <- function(x, allele_n, alleles){
#checks
check_allele_freq_input(x, subset = NULL, allele_n, alleles)
#calculate
return(sum(as.character(x) %in% alleles[allele_n])/length(x))
}
within_pop_var <- function(subset_snp_mat, subset){
#checks
within_pop_var_input_checks(subset_snp_mat, subset)
f_subset_snp_mat = subset_snp_mat[subset,apply(subset_snp_mat[subset,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f = apply(f_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f_allele1 = allele_freq_within(x, 1, alleles)
f_allele2 = allele_freq_within(x, 2, alleles)
(f_allele1 * f_allele2)^2}
})
return(sum(within_f))
}
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
x <- subset_snp_mat[,1]
f1_allele1 = allele_freq_btwn(x, subset_f1, 1, alleles)
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
class(subset_snp_mat)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2, alleles)
class(x)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
f1_allele1 = allele_freq_btwn(x, subset_f1, 1, alleles)
within_f2_sum <- within_pop_var(subset_snp_mat, subset_f2)
allele_freq_btwn <- function(x, subset, allele_n, alleles){
#checks
check_allele_freq_input(x, subset, allele_n, alleles)
#calculate
return(sum(as.character(x)[subset] %in% alleles[allele_n])/sum(subset))
}
allele_freq_within <- function(x, allele_n, alleles){
#checks
check_allele_freq_input(x, subset = NULL, allele_n, alleles)
#calculate
return(sum(as.character(x) %in% alleles[allele_n])/length(x))
}
within_pop_var <- function(subset_snp_mat, subset){
#checks
within_pop_var_input_checks(subset_snp_mat, subset)
f_subset_snp_mat = subset_snp_mat[subset,apply(subset_snp_mat[subset,], 2, FUN = function(x){sum(x != x[1] | x == 'N') > 0})]
within_f = apply(f_subset_snp_mat, 2, FUN = function(x){
alleles = names(table(as.character(x)))
if (length(alleles) > 2){0}else{
f_allele1 = allele_freq_within(x, 1, alleles)
f_allele2 = allele_freq_within(x, 2, alleles)
(f_allele1 * f_allele2)^2}
})
return(sum(within_f))
}
f1_allele1 = allele_freq_btwn(x, subset_f1, 1, alleles)
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
within_f1_sum <- within_pop_var(subset_snp_mat, subset_f1)
f2_allele2 = allele_freq_btwn(x, subset_f2, 2, alleles)
#look at microarray
install.packages("GEOquery")
library(GEOquery)
??GEOquery
#look at microarray
BiocManager::install("GEOquery")
library(GEOquery)
library(limma)
library(umap)
BiocManager::install("umap")
library(umap)
gset <- getGEO("GSE141512", GSEMatrix =TRUE, getGPL=FALSE)
View(gset)
if (length(gset) > 1) idx <- grep("GPL17586", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
ex <- exprs(gset)
View(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
par(mar=c(7,4,2,1))
title <- paste ("GSE141512", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
par(mar=c(4,4,2,1))
title <- paste ("GSE141512", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, main=title, legend=F)
ex <- na.omit(ex) # eliminate rows with NAs
plotSA(lmFit(ex), main="Mean variance trend, GSE141512")
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 5, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=5", xlab="", ylab="", pch=20, cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
#look at microarray
#BiocManager::install("GEOquery")
#BiocManager::install("umap")
BiocManager::install("maptools")
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
?exprs
??getGEO
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists_sub <- subset_pairs(snv_dists)
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
Fsp <- regentrans::Fsp
pheatmap(Fsp)
View(Fsp)
Fsp[Fsp %in% c("A, "B", "C", "D", "E")]
Fsp %in% c("A, "B", "C", "D", "E")
Fsp[c("A, "B", "C", "D", "E")]
Fsp[c("A", "B", "C", "D", "E")]
Fsp[c("A", "B", "C", "D", "E"),c("A", "B", "C", "D", "E")]
Fsp[c("A", "B", "C", "D", "E"),]
Fsp[c("A", "B", "C", "D", "E"),]
Fsp[c("A", "B", "C", "D", "E"),c("A", "B", "C", "D", "E")]
Fsp[c("A", "C", "D", "E"),c("A", "C", "D", "E")]
Fsp_sub <- Fsp[c("A", "C", "D", "E"),c("A", "C", "D", "E")]
pheatmap(Fsp_sub)
Fsp_sub <- Fsp[c("A", "C", "D", "E", "F"),c("A", "C", "D", "E", "F")]
pheatmap(Fsp_sub)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.2, color = "blue")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.2, color = "blue") + labs(y = "Fsp", x = "n Transfers")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers") + scale_y_discrete(breaks = c(10, 35))
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers") + scale_y_discrete(labels = c(0, 1))
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers") + scale_y_discrete(labels = c(0, .5, 1))
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers") + scale_y_discrete(labels = c("0", ".5", "1"))
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers") + scale_y_discrete(labels = c("0", ".16", ".33", ".5", ".66", ".83", "1"))
mtcars
max(mtcars$wt)
mtcars/5.424
mtcars$wt/5.424
mtcars$wt <- mtcars$wt/5.424
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers")
mtcars$wt
mtcars$wt = mtcars$wt*5.424
max(mtcars$mpg)
mtcars$mpg <- mtcars$mpg/33.9
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "n Transfers")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "Fsp", x = "Patient Flow Metric")
mtcars$mpg <- mtcars$mpg*33.9
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "n Closely Related Isolate Pairs", x = "Patient Flow Metric")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(alpha = 0.5, color = "blue") + labs(y = "n Closely Related \nIsolate Pairs", x = "Patient Flow Metric")
getwd()
setwd("/Users/sophiehoffman/Desktop/regentrans")
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists_sub <- subset_pairs(snv_dists)
snv_dists_sub
snv_dists_sub <- snv_dists_sub %>% filter(Loc1 %in% c("A", "B", "C", "D", "E"), Loc2 %in% c("A", "B", "C", "D", "E"))
#is transmission occurring in the region of interest?
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20),
mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20),
mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4, binwidth = 1) +
labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +
scale_fill_discrete(name = "Pair Type", labels = c("Between-region", "Within-region"))
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"),
mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"),
mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4, binwidth = 1) +
labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +
scale_fill_discrete(name = "Pair Type", labels = c("Between-region", "Within-region"))
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"),
mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"),
mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) +
labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +
scale_fill_discrete(name = "Pair Type", labels = c("Between-region", "Within-region"))
#histogram of n isolates from each facility
table(locs)
table(locs) %>% as.data.frame()
table(locs) %>% as.data.frame() %>% filter(locs %in% c("A", "B", "C", "D", "E"))
#histogram of n isolates from each facility
table(locs) %>% as.data.frame() %>% filter(locs %in% c("A", "B", "C", "D", "E")) %>% ggplot() + geom_bar(mapping = aes(x = locs, y = Freq))
#histogram of n isolates from each facility
table(locs) %>% as.data.frame() %>% filter(locs %in% c("A", "B", "C", "D", "E")) %>% ggplot() + geom_bar(mapping = aes(x = locs, y = Freq), stat = "Identity")
View(results)
#histogram of n isolates from each facility
table(locs) %>% as.data.frame() %>% filter(locs %in% c("A", "B", "C", "D", "E")) %>% ggplot() + geom_bar(mapping = aes(x = locs, y = Freq), stat = "Identity", fill = "salmon") + labs(x = "Regions", y = "Number of Isolates \nin Region")
locs_sub <- locs %in% c("A", "B", "C", "D", "E")
locs_sub <- locs[locs %in% c("A", "B", "C", "D", "E")]
locs[locs %in% c("A", "B", "C", "D", "E")]
locs
locs_sub <- length(locs[locs %in% c("A", "B", "C", "D", "E")])
length(locs)
locs_sub <- locs[locs %in% c("A", "B", "C", "D", "E")]
tree <- keep.tip(names(locs_sub))
tree <- ape::keep.tip(names(locs_sub))
?keep.tip
tree <- ape::keep.tip(tr,names(locs_sub))
mpr_tree = midpoint.root(tree)
gheatmap(ggtree(mpr_tree, layout = "circular"),as.data.frame(locs), color = NA)
as.data.frame(locs),
locs_anno <- as.data.frame(locs)
locs_anno
colnames(locs_anno) <- "Region"
gheatmap(ggtree(mpr_tree, layout = "circular"),locs_anno, color = NA)
ggtree(mpr_tree, layout = "circular") + geom_tippoint(aes(color = locs_anno))
ggtree(mpr_tree, layout = "circular") + geom_tippoint(aes(color = locs_sub))
locs_sub
ggtree(mpr_tree, layout = "circular") + geom_tippoint(aes(color = c(locs_sub, Nnode(mpr_tree))))
ggtree(mpr_tree, layout = "circular") + geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree)))))
ggtree(mpr_tree, layout = "circular") + geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree)))))
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
theme(legend.title = "Region ID")
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
theme(legend.title = element_blank())
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
labs(fill = "Region ID")
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
theme(legend.title = element_blank()) + labs(fill = "Region ID")
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
theme(legend.title = element_blank()) + labs(color = "Region ID")
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
labs(color = "Region ID")
ggtree(mpr_tree, layout = "circular") +
geom_tippoint(aes(color = c(locs_sub, rep(NA, Nnode(mpr_tree))))) +
labs(color = "Region ID") + theme(legend.direction = "horizontal")
