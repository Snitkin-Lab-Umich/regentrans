load_all()
library(devtools)
load_all()
#library(regentrans)
setwd("/Users/sophiehoffman/Desktop/regentrans/")
load_all()
library(igraph)
library(igraph)
data()
pt_trans_net <- pt_flow
#make graph
g <- graph_from_adjacency_matrix(as.matrix(pt_trans_net),mode='directed',weighted = TRUE)
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10)
View(adjm)
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
snv_dists = NULL
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
library(ape)
library(dplyr)
library(devtools)
library(phytools)
library(igraph)
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
thresh = 10
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
run_snv_dists
#make pt_trans_net not factors
pt_trans_net$source_facil <- as.character(pt_trans_net$source_facil)
pt_trans_net$dest_facil <- as.character(pt_trans_net$dest_facil)
#run get_snv_dists if necessary
if(run_snv_dists){
cat("Running get_snv_dists...")
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
}
#subset to only facilities in the locs object
common_locs <- intersect(unique(c(snv_dists$Loc1, snv_dists$Loc2)), unique(c(pt_trans_net$source_facil, pt_trans_net$dest_facil)))
pt_trans_net <- pt_trans_net %>% filter(source_facil %in% common_locs,
dest_facil %in% common_locs)
snv_dists <- snv_dists %>% filter(Loc1 %in% common_locs,
Loc2 %in% common_locs)
#remove any same-facility pairs
pat_flow <- dplyr::bind_cols(pt_trans_net %>% filter(source_facil != dest_facil))
#remove any duplicate info
pat_flow_1 <- pat_flow[!duplicated(t(apply(pat_flow, 1, sort))),]
#make a list for apply
pat_flow <- split(pat_flow_1[,1:2], seq(nrow(pat_flow_1)))
#subset to one of each pair for snv_dists
snv_dists_sub <- subset_pairs(snv_dists)
pat_flow_summary <- data.frame(lapply(pat_flow, function(x){
#for each pair subset the snv_dists output to include only patients that came from those facilities
pair <- c(as.character(x[[1]]), as.character(x[[2]]))
#subset to only ones that are under the distance threshold
n <- snv_dists_sub %>% filter(as.character(Loc1) %in% pair,
as.character(Loc2) %in% pair,
Loc1 != Loc2,
as.numeric(Pairwise_Dists) <= thresh) %>%
nrow() %>% as.numeric()
return(n)
}))
pat_flow
#add this info back to the list
pt_trans_summary <- data.frame(matrix(unlist(pat_flow), nrow=length(pat_flow), byrow=TRUE)) %>% mutate(facil_1 = X1, facil_2 = X2, n_closely_related_pairs = t(pat_flow_summary)) %>% select(-1, -2) %>% left_join(pat_flow_1, by = c("facil_1" = "source_facil", "facil_2" = "dest_facil"))
pt_trans_summary
matrix(unlist(pat_flow), nrow=length(pat_flow), byrow=TRUE)
?graph_from_adjacency_matrix
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df %>% spread(x, y) %>% gather("x", "y", a:b, na.rm = TRUE)
library(dplyr)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% dplyr::spread(x, y)
df %>% spread(x, y)
library(tidyr)
df %>% spread(x, y)
df
pt_trans_net
spread(pt_trans_net, source_facil, dest_facil)
pivot_wider(pt_trans_net, names_from = source_facil, values_from = dest_facil)
tmp <- data.frame(x=gl(2,3, labels=letters[24:25]),
y=gl(3,1,6, labels=letters[1:3]),
z=c(1,2,3,3,3,2))
tmp
pt_trans_net
pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
#make graph
trans_mat <- tidyr::pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
g <- graph_from_adjacency_matrix(as.matrix(pt_trans_net),mode='directed',weighted = TRUE)
g <- graph_from_adjacency_matrix(as.matrix(trans_mat),mode='directed',weighted = TRUE)
trans_mat
View(trans_mat)
trans_mat <- as.data.frame(,2:ncol(trans_mat))
trans_mat <- as.data.frame(trans_mat[,2:ncol(trans_mat)])
rownames(trans_mat) <- colnames(trans_mat)
g <- graph_from_adjacency_matrix(as.matrix(trans_mat),mode='directed',weighted = TRUE)
g
out_strength = strength(g,mode='out') # get number of outgoing patient transfers for each vertex
tail_vert = tail_of(g,E(g)) # get tail (source) vertex for each edge
edwt_sum = sapply(names(tail_vert), function(x) out_strength[names(out_strength) == x]) # get number of outgoing patient transfers of tail vertex for each edge
E(g)$weight_norm = -log10(E(g)$weight/edwt_sum) # normalize edge weight by number of outgoing patient transfers of source vertex and take negative log (to use to calculate shortest paths)
E(g)$weight_norm_nolog = E(g)$weight/edwt_sum
g = set.vertex.attribute(g, "name", value=V(g))
View(g)
ltach_vertex_inds = as.vector(V(g)[!is.na(V(g)$labels)])
names(ltach_vertex_inds) = V(g)$labels[!is.na(V(g)$labels)]
ltach_vertex_inds
pt_flow
grps = components(g, mode='weak')
grps
