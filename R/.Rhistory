all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))) |
(ncol(snv_dists) == 6 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra"))))
!((ncol(snv_dists) == 8 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))) |
(ncol(snv_dists) == 6 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra"))))
View(snv_dists)
threshs = seq(1,50,1)
class(threshs)
class(threshs[1])
typeof(threshs)
is.vector(threshs)
class(threshs) == "numeric"
is.vector(threshs)
#checks
check_get_snv_dists_input_no_pt(dists, locs)
#check pt if it isn't missing
if(!missing(pt)){
check_get_snv_dists_input_pt(dists, locs, pt)
#subset by pt
pt_sub <- pt[rownames(dists)]
}
#subset by locs
loc_sub <- locs[rownames(dists)]
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
View(snps)
View(dists)
?dist.dna
#change freq colname?
colnames(snps) <- paste("Var1", "Var2", "Pairwise_dists")
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
#change freq colname?
colnames(snps) <- c("Var1", "Var2", "Pairwise_dists")
#add locs
snps$loc1 <- loc_sub[snps$Var1]
snps$loc2 <- loc_sub[snps$Var2]
#add pts
snps$pt1 <- pt_sub[snps$Var1]
snps$pt2 <- pt_sub[snps$Var2]
#add labels
snp_facility_pairs <- bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
View(snp_facility_pairs)
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#run the function
snv_dists <- get_snv_dists(dists, locs, pt)
View(snv_dists)
max(snv_dists$Pairwise_dists)
max(threshs)
View(snv_dists)
threshs < 0
any(threshs < 0)
all(threshs < 0)
?any
?all
?any
?any
?all
?any
!any(threshs < 0)
max(snv_dists$Pairwise_dists)
max(threshs)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
View(intra_cts)
seq(0,.50,1)
seq(1,.50,1)
seq(1,0.50,1)
?seq
seq(0,0.50,0.01)
seq(1,50,1)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
paste("Your max threshold ", max(threshs), " is greater than your max CNV distance of ", max(snv_dists$Pairwise_dists),
"\nIf you are using the default thereshold input, please enter a numeric vector of thresholds")
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#get_frac_intra
threshs <- seq(0,0.50,0.01)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
threshs <- seq(0,0.0264350436487801,0.01)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
#get_frac_intra
threshs <- seq(0.001,0.0264350436487801,0.005)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),6),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
im
return(data.frame(intra_cts))
get_frac_intra(snv_dists, threshs)
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#get_frac_intra
threshs <- seq(0.001,0.0264350436487801,0.005)
get_frac_intra(snv_dists, threshs)
#get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
#wrapper get_frac_intra_from_snv_dists
frac_intra_2 <- get_frac_intra_from_snv_dists(dists, locs, pt, threshs)
frac_intra_2
#############################################################################################################################################
#get_clusters
tr <- tree
?read.tree
install.packages("oak")
library(oak)
class(tree)
class(tr) == "phylo"
typeof(pureness)
pureness = 1
typeof(pureness)
typeof(1)
typeof(10)
typeof(threshs[1])
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv")
#alignment path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta", format = "fasta")
#tree path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile")
######################
devtools::load_all("/Users/sophiehoffman/Desktop/regentrans")
getwd()
#devtools::load_all("/Users/sophiehoffman/Desktop/regentrans")
load_all()
??snitkitr
View(check_get_snv_dists_input_pt)
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#dists - snv distance matrix returned by dist.dna
#use as.matrix = true for the dist.dna function
dists <- dist.dna(x = fasta, as.matrix = TRUE)
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$f_id
names(locs) <- metadata$gID
#pt
pt <- metadata$pt_id
names(pt) <- metadata$gID
#for the test data I have to remove the last char of each of the row and col names
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
locs_sub <- locs[tr$tip.label]
#############################################################################################################################################
#get_clusters
tr <- tree
#check that the tree is a tree
check_tree(tr)
#check the locs input
check_locs(locs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check the locs input
check_locs(locs)
locs_sub <- locs[tr$tip.label]
locs_sub
tr$tip.label
length(tr$tip.label)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check mandatory inputs
check_get_clusters_mand_inputs(tr, locs)
substr(tr$tip.label, 1, nchar(tr$tip.label)-1)
tr$tip.label <- substr(tr$tip.label, 1, nchar(tr$tip.label)-1)
tr$tip.label
#check mandatory inputs
check_get_clusters_mand_inputs(tr, locs)
#check pureness
if(!missing(pureness)){
check_pureness(pureness)
}
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
pureness = 1
bootstrap = NULL
#check inputs
check_get_clusters_inputs(tr, locs, pureness, bootstrap)
locs_sub <- locs[tr$tip.label]
locs_sub
subtrs_sub <- ape::subtrees(tr)
pure_subtrees <- get_largest_subtree(subtrs_sub, locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
warnings()
View(subtrs_sub)
na.rm(locs_sub)
x<-locs_sub[!is.na(locs_sub)]
x
pure_subtrees <- get_largest_subtree(subtrs_sub, x, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
pure_subtrees <- get_largest_subtree(subtrs_sub, x, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
warnings()
pure_subtr_info <- bind_cols(f_id=locs_sub,
subtr_size=unlist(pure_subtrees$largest_st),
index=unlist(pure_subtrees$largest_st_i))
pure_subtr_info <- bind_cols(f_id=x,
subtr_size=unlist(pure_subtrees$largest_st),
index=unlist(pure_subtrees$largest_st_i))
View(pure_subtrees)
View(pure_subtr_info)
# change singletons from 0 to 1
pure_subtr_info <- pure_subtr_info %>% mutate(subtr_size=ifelse(subtr_size==0 & index == 1, 1, subtr_size))
# remove duplicates (singletons aren't duplicates)
pure_subtr_info <- pure_subtr_info[!duplicated(pure_subtr_info) | pure_subtr_info$subtr_size == 1,]
View(pure_subtr_info)
View(pure_subtr_info)
class(pure_subtr_info)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA")
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = "\t", header = FALSE)
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = TRUE)
View(subtrs_sub)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE, skip = 1)
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = "\t", header = FALSE, skip = 1)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE, skip = 1)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_VREfm", sep = " ", header = FALSE, skip = 1)
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
#metadata path
#/nfs/turbo/umms-esnitkin/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv")
#alignment path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta", format = "fasta")
#tree path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile")
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_VREfm", sep = " ", header = FALSE, skip = 1)
#dists - snv distance matrix returned by dist.dna
#use as.matrix = true for the dist.dna function
dists <- dist.dna(x = fasta, as.matrix = TRUE)
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$f_id
names(locs) <- metadata$gID
#pt
pt <- metadata$pt_id
names(pt) <- metadata$gID
#for the test data I have to remove the last char of each of the row and col names
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
_
#subset by locs
loc_sub <- locs[rownames(dists)]
loc_sub
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
View(snps)
#run the function
snv_dists <- get_snv_dists(dists, locs, pt)
View(snv_dists)
View(snv_dists)
frac_intra <- get_frac_intra(snv_dists, threshs)
#############################################################################################################################################
#get_clusters
tr <- tree
tr$tip.label <- substr(tr$tip.label, 1, nchar(tr$tip.label)-1)
pureness = 1
bootstrap = NULL
locs_sub <- locs[tr$tip.label]
subtrs_sub <- ape::subtrees(tr)
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
locs_sub
#for running tests
locs_sub <-locs_sub[!is.na(locs_sub)]
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
warnings()
View(pure_subtrees)
pure_subtr_info <- bind_cols(f_id=locs_sub,
subtr_size=unlist(pure_subtrees$largest_st),
index=unlist(pure_subtrees$largest_st_i))
View(pure_subtr_info)
# change singletons from 0 to 1
pure_subtr_info <- pure_subtr_info %>% mutate(subtr_size=ifelse(subtr_size==0 & index == 1, 1, subtr_size))
View(dists)
View(snp_dist)
snp_dist <- fasta
rownames(snp_dist)
class(fasta)
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv")
#alignment path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta",
format = "fasta")
#tree path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile")
dists <- dist.dna(x = fasta, as.matrix = TRUE, model = "N")
#tests for regentrans - to be made when the public facing dataset is available
####################################test data######################################
test_dists <- dists[1:4, 1:4]
View(test_dists)
locs <- metadata$f_id
names(locs) <- metadata$gID
#pt
pt <- metadata$pt_id
names(pt) <- metadata$gID
#for the test data I have to remove the last char of each of the row and col names
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
isolates <- intersect(names(locs), rownames(dists))
dists<-dists[isolates,isolates]
View(dists)
metadata_realm <- metadata
dists_realm <- dists
tree_realm <- tree
fasta_realm <- fasta
#metadata path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Analysis/regentrans_data/2021-02-16_subset-data/data/ltach-metadata.csv
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Analysis/regentrans_data/2021-02-16_subset-data/data/ltach-metadata.csv")
View(metadata)
#alignment path Penn
#/nfs/turbo/umms-esnitkin/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_Penn_KPC/Sequence_data/2021_02_10_Penn_All_variant_calling/2021_02_12_08_34_28_core_results/gubbins/2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta",
format = "fasta")
dists <- dist.dna(x = fasta, as.matrix = TRUE, model = "N")
locs <- metadata$ltach
names(locs) <- metadata$isolate_no
#pt
pt <- metadata$patient_id
names(pt) <- metadata$isolate_no
locs
View(dists)
locs[100]
locs("100")
locs[100]
locs["100"]
paste0(metadata$isolate_no, "PCMP_H")
paste0("PCMP_H", metadata$isolate_no)
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
names(pt) <- paste0("PCMP_H", metadata$isolate_no)
locs
#####test data######################################
test_dists <- dists[1:4, 1:4]
test_dists
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
check_get_snv_dists_input_pt(test_dists)
locs <- locs[1:4]
locs
locs <- metadata$ltach
names(locs) <- paste0("PCMP_H", metadata$isolate_no)
test_locs <- locs[1:4]
test_pts <- pt[1:4]
is.null(check_get_snv_dists_input_pt(test_dists, test_locs, test_pt)
)
test_pt <- pt[1:4]
is.null(check_get_snv_dists_input_pt(test_dists, test_locs, test_pt))
expect_true(is.null(check_get_snv_dists_input_pt(test_dists, test_locs, test_pt)))
is.null(check_get_snv_dists_input_no_pt(test_dists, test_locs))
test_dists
test_locs
test_pt
test_dists <- dists[unname(test_locs), unname(test_locs)]
unname(test_locs)
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists
is.null(check_get_snv_dists_input_pt(test_dists, test_locs, test_pt))
is.null(check_get_snv_dists_input_no_pt(test_dists, test_locs))
library(devtools)
document()
