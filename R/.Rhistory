dists <- dist.dna(x = fasta, as.matrix = TRUE)
dim(dists)
511*511
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
check_get_snv_dists_input_all(dists, locs, pt)
loc_sub <- locs[rownames(dists)]
rownames(dists)
locs
loc_sub
locs[rownames(dists)]
pt_sub <- pt[rownames(dists)]
pt_sub
sum(!is.na(pt_sub))
# snps <- dists[lower.tri(dists, diag = FALSE)] <- NA
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
View(snps)
snps$loc1 <- loc_sub[snps$Var1]
snps$loc2 <- loc_sub[snps$Var2]
snps$pt1 <- pt_sub[snps$Var1]
snps$pt2 <- pt_sub[snps$Var2]
library(dplyr)
bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
x <- bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
View(x)
sum(!is.na(snps$pt1))
sum(!is.na(snps$pt2))
sum(!is.na(snps$loc1))
sum(!is.na(snps$loc2))
89936/2
snp_facility_paris <- bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
View(snp_facility_paris)
get_snv_dists <- function(dists, locs, pt){
#checks
check_get_snv_dists_input_no_pt(dists, locs)
#check pt if it isn't missing
if(!missing(pt)){
check_get_snv_dists_input_pt(dists, locs, pt)
#subset by pt
pt_sub <- pt[rownames(dists)]
}
#subset by locs
loc_sub <- locs[rownames(dists)]
#what is this doing?
# snps <- dists[lower.tri(dists, diag = FALSE)] <- NA
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
#add locs
snps$loc1 <- loc_sub[snps$Var1]
snps$loc2 <- loc_sub[snps$Var2]
#do pt stuff
if(!missing(pt)){
#add pts
snps$pt1 <- pt_sub[snps$Var1]
snps$pt2 <- pt_sub[snps$Var2]
#add labels
snp_facility_pairs <- bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
}
else{
#add labels
snp_facility_pairs <- bind_cols(snps %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
}
#return snp matrix
return(snp_facility_pairs)
}
hi <- get_snv_dists(dists, locs, pt)
#wrapper for if pt is included
check_get_snv_dists_input_pt <- function(dists, locs, pt){
#check that the pt object is a named vector
check_pt(pt, dists)
#check that the pt and dists objects have the same lengths
check_pt_vs_locs(pt, locs)
}
#wrapper function if pt not included
check_get_snv_dists_input_no_pt <- function(dists, locs){
#check that the dists object is the snv object returned by dist.dna
check_dists(dists)
#check that the locs object is a named vector
check_locs(locs, dists)
#check that the locs names exist in the dists dataframe
check_dists_vs_locs(dists, locs)
}
#*******************************************************************************************************************************************#
#***********************************************END CHECKS FOR get_snv_dists FUNCTION*******************************************************#
#*******************************************************************************************************************************************#
hi <- get_snv_dists(dists, locs, pt)
View(hi)
?test_that
??test_that
library(devtools)
load_all
?load_all
load_all("/Users/sophiehoffman/Desktop/regentrans")
getwd()
load_all()
devtools::load_all()
devtools::load_all("/Users/sophiehoffman/Desktop/regentrans")
hi <- get_snv_dists(dists, locs)
View(hi)
NA != NA
View(hi)
#subset by locs
loc_sub <- locs[rownames(dists)]
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
#add locs
snps$loc1 <- loc_sub[snps$Var1]
snps$loc2 <- loc_sub[snps$Var2]
#add labels
snp_facility_pairs <- bind_cols(snps %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')) %>% filter(!is.na(intra)))
View(snp_facility_pairs)
#load libraries
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#metadata path
#/nfs/turbo/umms-esnitkin/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv")
#alignment path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta", format = "fasta")
#tree path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile
tree <- read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile")
#dists - snv distance matrix returned by dist.dna
#use as.matrix = true for the dist.dna function
dists <- dist.dna(x = fasta, as.matrix = TRUE)
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$f_id
names(locs) <- metadata$name
#pt
pt <- metadata$pt_id
names(pt) <- metadata$name
#for the test data I have to remove the last char of each of the row and col names
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
snv_dists <- get_snv_dists(dists, locs, pt)
locs
locs <- metadata$f_id
names(locs) <- metadata$name
locs
View(metadata)
names(locs) <- metadata$gID
#pt
pt <- metadata$pt_id
names(pt) <- metadata$gID
snv_dists <- get_snv_dists(dists, locs, pt)
View(snv_dists)
class(snv_dists)
View(snv_dists)
snv_dists_no_pt <- get_snv_dists(dists, locs)
ncol(snv_dists) == 6
ncol(snv_dists) == 8
ncol(snv_dists) == 8 | ncol(snv_dists) == 6
!(ncol(snv_dists) == 8 | ncol(snv_dists) == 6)
ncol(snv_dists_no_pt) == 8
ncol(snv_dists_no_pt) == 6
colnames(snv_dists)
c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra")
c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra") == colnames(snv_dists)
c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "i") == colnames(snv_dists)
if(c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "i") == colnames(snv_dists))
{print("hi")}
all(colnames(snv_dists) != c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))
colnames(snv_dists)
colnames(snv_dists) != c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra")
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra")
)
!all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "i"))
View(snv_dists)
colnames(snv_dists_no_pt)
(ncol(snv_dists) == 8 & all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra")))
(ncol(snv_dists) == 8 &
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra")))
(ncol(snv_dists) == 6 &
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra")))
ncol(snv_dists) == 6 &
n
ncol(snv_dists) == 6
((ncol(snv_dists) == 8 &
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))) |
(ncol(snv_dists) == 6 &
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra"))))
((ncol(snv_dists) == 8 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))) |
(ncol(snv_dists) == 6 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra"))))
!((ncol(snv_dists) == 8 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "pt1",  "pt2", "intra"))) |
(ncol(snv_dists) == 6 &&
all(colnames(snv_dists) == c("Var1", "Var2", "Freq", "loc1", "loc2", "intra"))))
View(snv_dists)
threshs = seq(1,50,1)
class(threshs)
class(threshs[1])
typeof(threshs)
is.vector(threshs)
class(threshs) == "numeric"
is.vector(threshs)
#checks
check_get_snv_dists_input_no_pt(dists, locs)
#check pt if it isn't missing
if(!missing(pt)){
check_get_snv_dists_input_pt(dists, locs, pt)
#subset by pt
pt_sub <- pt[rownames(dists)]
}
#subset by locs
loc_sub <- locs[rownames(dists)]
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
View(snps)
View(dists)
?dist.dna
#change freq colname?
colnames(snps) <- paste("Var1", "Var2", "Pairwise_dists")
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists))))
#change freq colname?
colnames(snps) <- c("Var1", "Var2", "Pairwise_dists")
#add locs
snps$loc1 <- loc_sub[snps$Var1]
snps$loc2 <- loc_sub[snps$Var2]
#add pts
snps$pt1 <- pt_sub[snps$Var1]
snps$pt2 <- pt_sub[snps$Var2]
#add labels
snp_facility_pairs <- bind_cols(snps %>% filter(pt1 != pt2) %>% mutate(intra=ifelse(loc1==loc2,'Intra-facility pair','Inter-facility pair')))
View(snp_facility_pairs)
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#run the function
snv_dists <- get_snv_dists(dists, locs, pt)
View(snv_dists)
max(snv_dists$Pairwise_dists)
max(threshs)
View(snv_dists)
threshs < 0
any(threshs < 0)
all(threshs < 0)
?any
?all
?any
?any
?all
?any
!any(threshs < 0)
max(snv_dists$Pairwise_dists)
max(threshs)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
View(intra_cts)
seq(0,.50,1)
seq(1,.50,1)
seq(1,0.50,1)
?seq
seq(0,0.50,0.01)
seq(1,50,1)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
paste("Your max threshold ", max(threshs), " is greater than your max CNV distance of ", max(snv_dists$Pairwise_dists),
"\nIf you are using the default thereshold input, please enter a numeric vector of thresholds")
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
#get_frac_intra
threshs <- seq(0,0.50,0.01)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
threshs <- seq(0,0.0264350436487801,0.01)
#check inputs
check_get_frac_intra_input(snv_dists, threshs)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Freq < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
#get_frac_intra
threshs <- seq(0.001,0.0264350436487801,0.005)
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),2),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
intra_cts <- t(sapply(threshs, function(i){
intra <- snv_dists$intra[snv_dists$Pairwise_dists < i & !is.na(snv_dists$intra)]
im <- c(i,
table(factor(intra,levels=c('Intra-facility pair','Inter-facility pair'))),
round(mean(intra == 'Intra-facility pair'),6),
round(mean(intra == 'Inter-facility pair'),2))
names(im) <- c('thresh','inter','intra','frac_intra','frac_inter')
im
}))
im
return(data.frame(intra_cts))
get_frac_intra(snv_dists, threshs)
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#get_frac_intra
threshs <- seq(0.001,0.0264350436487801,0.005)
get_frac_intra(snv_dists, threshs)
#get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
#wrapper get_frac_intra_from_snv_dists
frac_intra_2 <- get_frac_intra_from_snv_dists(dists, locs, pt, threshs)
frac_intra_2
#############################################################################################################################################
#get_clusters
tr <- tree
?read.tree
install.packages("oak")
library(oak)
class(tree)
class(tr) == "phylo"
typeof(pureness)
pureness = 1
typeof(pureness)
typeof(1)
typeof(10)
typeof(threshs[1])
library(ape)
library(dplyr)
library(devtools)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source tests
source("/Users/sophiehoffman/Desktop/regentrans/R/tests.R")
#source get_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_snv_dists.R")
#source get_frac_intra
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra.R")
#get_frac_intra_from_snv_dists
source("/Users/sophiehoffman/Desktop/regentrans/R/get_frac_intra_from_snv_dists.R")
metadata <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Analysis/NDM_transmission/2020-12-16_manuscript-figures/data/kp_st147_metadata.csv")
#alignment path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta
fasta <- ape::read.dna("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.filtered_polymorphic_sites.fasta", format = "fasta")
#tree path
#/nfs/turbo/umms-esnitkin/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile
tree <- ape::read.tree("/Users/sophiehoffman/Desktop/gl_mount/Project_REALM/Sequence_data/output_files/2020_12_09_variant_calling_ST147/2020_12_11_12_49_38_core_results/gubbins/iqtree_masked_wga/2020_12_11_12_49_38_Kp46596_genome_aln_w_alt_allele_unmapped.treefile")
######################
devtools::load_all("/Users/sophiehoffman/Desktop/regentrans")
getwd()
#devtools::load_all("/Users/sophiehoffman/Desktop/regentrans")
load_all()
??snitkitr
View(check_get_snv_dists_input_pt)
#source get_largest_subtree
source("/Users/sophiehoffman/Desktop/regentrans/R/get_largest_subtree.R")
#dists - snv distance matrix returned by dist.dna
#use as.matrix = true for the dist.dna function
dists <- dist.dna(x = fasta, as.matrix = TRUE)
#locs - locations of isolates (e.g. facility of isolation)
#named vector, where names are same as names of dist.dna output
locs <- metadata$f_id
names(locs) <- metadata$gID
#pt
pt <- metadata$pt_id
names(pt) <- metadata$gID
#for the test data I have to remove the last char of each of the row and col names
rownames(dists) <- substr(rownames(dists), 1, nchar(rownames(dists))-1)
colnames(dists) <- substr(colnames(dists), 1, nchar(colnames(dists))-1)
locs_sub <- locs[tr$tip.label]
#############################################################################################################################################
#get_clusters
tr <- tree
#check that the tree is a tree
check_tree(tr)
#check the locs input
check_locs(locs)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check the locs input
check_locs(locs)
locs_sub <- locs[tr$tip.label]
locs_sub
tr$tip.label
length(tr$tip.label)
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
#check mandatory inputs
check_get_clusters_mand_inputs(tr, locs)
substr(tr$tip.label, 1, nchar(tr$tip.label)-1)
tr$tip.label <- substr(tr$tip.label, 1, nchar(tr$tip.label)-1)
tr$tip.label
#check mandatory inputs
check_get_clusters_mand_inputs(tr, locs)
#check pureness
if(!missing(pureness)){
check_pureness(pureness)
}
#source checks
source("/Users/sophiehoffman/Desktop/regentrans/R/checks.R")
pureness = 1
bootstrap = NULL
#check inputs
check_get_clusters_inputs(tr, locs, pureness, bootstrap)
locs_sub <- locs[tr$tip.label]
locs_sub
subtrs_sub <- ape::subtrees(tr)
pure_subtrees <- get_largest_subtree(subtrs_sub, locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
warnings()
View(subtrs_sub)
na.rm(locs_sub)
x<-locs_sub[!is.na(locs_sub)]
x
pure_subtrees <- get_largest_subtree(subtrs_sub, x, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
#source reverse_list_str
source("/Users/sophiehoffman/Desktop/regentrans/R/reverse_list_str.R")
pure_subtrees <- get_largest_subtree(subtrs = subtrs_sub, isolate_labels = locs_sub, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
pure_subtrees <- get_largest_subtree(subtrs_sub, x, bootstrap = bootstrap, pureness = pureness) # NOTE: this function is in snitkitr right now, but I think we should migrate it to this package (or at least include it here as well); this _might_ be buggy, so definitely good to add unit tests for it
warnings()
pure_subtr_info <- bind_cols(f_id=locs_sub,
subtr_size=unlist(pure_subtrees$largest_st),
index=unlist(pure_subtrees$largest_st_i))
pure_subtr_info <- bind_cols(f_id=x,
subtr_size=unlist(pure_subtrees$largest_st),
index=unlist(pure_subtrees$largest_st_i))
View(pure_subtrees)
View(pure_subtr_info)
# change singletons from 0 to 1
pure_subtr_info <- pure_subtr_info %>% mutate(subtr_size=ifelse(subtr_size==0 & index == 1, 1, subtr_size))
# remove duplicates (singletons aren't duplicates)
pure_subtr_info <- pure_subtr_info[!duplicated(pure_subtr_info) | pure_subtr_info$subtr_size == 1,]
View(pure_subtr_info)
View(pure_subtr_info)
class(pure_subtr_info)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA")
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = "\t", header = FALSE)
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = TRUE)
View(subtrs_sub)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE, skip = 1)
View(snp_dist)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = "\t", header = FALSE, skip = 1)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_MRSA", sep = " ", header = FALSE, skip = 1)
#############################################################################################################################################
#get_facility_fsp
snp_dist <- read.csv("/Users/sophiehoffman/Desktop/gl_mount/Project_Nursing_Home/Sequence_data/final_genomics_files/2019-07-19_Filtered_Pathways_VREfm", sep = " ", header = FALSE, skip = 1)
