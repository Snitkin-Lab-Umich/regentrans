pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the indexes of all isolates from that patient
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
}
}
})
pruned_tips
first_sts
load_all()
tr_2 <- prune_tree(test_tr, patients)
load_all()
tr_2 <- prune_tree(test_tr, patients)
library(phytools)
load_all()
tr_2 <- prune_tree(test_tr, patients)
tree_sub <- phytools::midpoint.root(tree_sub)
#get subtrees
first_sts = ape::subtrees(tree_sub)
#make a list of tips to drop
pruned_tips <- vector()
first_sts
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G', 'H'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tr_2 <- prune_tree(test_tr, patients)
plot_pat <- c(patients, rep(NA, ape::Nnode(tr_2)))
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
patients
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=patients), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G', 'H'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tree <- test_tr
pt <- patients
isolates <- intersect(tree$tip.label, names(pt))
isolates
pt_sub <- pt[isolates]
tree_sub <- ape::keep.tip(tree,isolates)
tree_sub <- phytools::midpoint.root(tree_sub)
first_sts = ape::subtrees(tree_sub)
#make a list of tips to drop
pruned_tips <- vector()
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the indexes of all isolates from that patient
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
}
}
})
pruned_tips
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tree <- test_tr
pt <- patients
isolates <- intersect(tree$tip.label, names(pt))
#subset locs
pt_sub <- pt[isolates]
#subset the tree
tree_sub <- ape::keep.tip(tree,isolates)
tree_sub <- phytools::midpoint.root(tree_sub)
#get subtrees
first_sts = ape::subtrees(tree_sub)
#make a list of tips to drop
pruned_tips <- vector()
#go into one subtree
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the indexes of all isolates from that patient
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
}
}
})
pruned_tips
x = 1
temp_tree = first_sts[[x]]
temp_tree
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
View(temp_tree_mat)
length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat)
n_per_pat <- table(temp_tree_mat[,1])
n_per_pat
n_per_pat <- n_per_pat[n_per_pat > 1]
n_per_pat
i = 1
tips <- which(temp_tree_mat[,1] %in% names(n_per_pat)[i])
tips
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
pruned_tips
x = 2
temp_tree = first_sts[[x]]
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
temp_tree_mat[,1]
names(n_per_pat)[i]
temp_tree_mat[,1] %in% names(n_per_pat)[i]
rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
tips[2:length(tips)]
tr_2 <- prune_tree(test_tr, patients)
load_all()
tr_2 <- prune_tree(test_tr, patients)
tree
pt
isolates <- intersect(tree$tip.label, names(pt))
#subset locs
pt_sub <- pt[isolates]
#subset the tree
tree_sub <- ape::keep.tip(tree,isolates)
tree_sub <- phytools::midpoint.root(tree_sub)
#get subtrees
first_sts = ape::subtrees(tree_sub)
#make a list of tips to drop
pruned_tips <- vector()
#go into one subtree
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
}
}
})
pruned_tips
x = 1
temp_tree = first_sts[[x]]
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))
n_per_pat <- table(temp_tree_mat[,1])
n_per_pat
n_per_pat <- n_per_pat[n_per_pat > 1]
n_per_pat
i = 1
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
tips
tips[2:length(tips)]
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
pruned_tips
i = 2
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
tips
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
pruned_tips
i = 3
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
?subtrees
phy<-rtree(12)
par(mfrow=c(4,3))
plot(phy, sub="Complete tree")
### Extract the subtrees
l<-subtrees(phy)
### plot all the subtrees
for (i in 1:11) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
par("mar")
par(mar=c(1,1,1,1))
phy<-rtree(12)
par(mfrow=c(4,3))
plot(phy, sub="Complete tree")
### Extract the subtrees
l<-subtrees(phy)
### plot all the subtrees
for (i in 1:11) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
plot(phy, sub="Complete tree")
### Extract the subtrees
l<-subtrees(test_tr)
### plot all the subtrees
for (i in 1:11) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
l<-subtrees(test_tr)
### plot all the subtrees
for (i in 1:11) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
test_that("prune_tree works", {
tr_2 <- prune_tree(test_tr, patients)
})
test_tr
l<-subtrees(test_tr)
l
length(subtrees)
length(l)
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
### plot all the subtrees
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mar=c(1,1,1,1))
par(mar=c(1,1,1,1))
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(1,1))
length(l)
par(mfrow=c(6,4))
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
pruned_tree_tips
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
}
}
})
pruned_tree_tips
pruned_tips
tree <- test_tr
pt <- patients
#make sure we reduce the tree to tree tips and pt have in common
#get the names of the things in common
isolates <- intersect(tree$tip.label, names(pt))
#subset locs
pt_sub <- pt[isolates]
#subset the tree
tree_sub <- ape::keep.tip(tree,isolates)
tree_sub <- phytools::midpoint.root(tree_sub)
#get subtrees
first_sts = ape::subtrees(tree_sub)
#make a list of tips to drop
pruned_tips <- vector()
#go into one subtree
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
tips[2:length(tips)]
}
}
})
View(pruned_tree_tips)
pruned_tips
x = 1
pruned_tree_tips = data.frame(sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
return(tips[2:length(tips)])
}
}
}))
pruned_tree_tips = sapply(1:length(first_sts), FUN = function(x){
temp_tree = first_sts[[x]]
#make a list of all of the different isolates
#for now assume it is facility ID and patient ID
temp_tree_mat = as.data.frame(sapply(temp_tree$tip.label, FUN = function(x){
cbind(pt[x])}))
#if there is more than one isolate from a patient, drop all but the first
if(!(length(unique(temp_tree_mat[,1])) == nrow(temp_tree_mat))){
#make a table to show how many per patient
n_per_pat <- table(temp_tree_mat[,1])
#subset to ones > 1
n_per_pat <- n_per_pat[n_per_pat > 1]
#loop through these patients
for(i in 1:length(n_per_pat)){
#find the names of all isolates from that patient
tips <- rownames(temp_tree_mat)[temp_tree_mat[,1] %in% names(n_per_pat)[i]]
#find all but first and add them to list to be dropped
pruned_tips <- c(pruned_tips, tips[2:length(tips)])
return(tips[2:length(tips)])
}
}
})
View(pruned_tree_tips)
unlist(pruned_tree_tips)
pruned_tips <- unique(unlist(pruned_tree_tips))
pruned_tips
pruned_tree <- drop.tip(tree, pruned_tips)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tr_2 <- prune_tree(test_tr, patients)
load_all()
tr_2 <- prune_tree(test_tr, patients)
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=patients), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
patients
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=(patients %in% tr_2$tip.label)), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
patients %in% tr_2$tip.label
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=patients[patients %in% tr_2$tip.label]), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
patients[patients %in% tr_2$tip.label]
patients
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=patients[names(patients) %in% tr_2$tip.label]), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
patients[names(patients) %in% tr_2$tip.label]
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
plot_pat
plot_pat <- c(patients[names(patients) %in% tr_2$tip.label], rep(NA, ape::Nnode(tr_2)))
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tr_2 <- prune_tree(test_tr, patients)
plot_pat <- c(patients[names(patients) %in% tr_2$tip.label], rep(NA, ape::Nnode(tr_2)))
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tr_2 <- prune_tree(test_tr, patients)
plot_pat <- c(patients[names(patients) %in% tr_2$tip.label], rep(NA, ape::Nnode(tr_2)))
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
length(first_sts)
load_all()
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
tr_2 <- prune_tree(test_tr, patients)
plot_pat <- c(patients[names(patients) %in% tr_2$tip.label], rep(NA, ape::Nnode(tr_2)))
ggtree::ggtree(tr_2) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
load_all()
check_prune_tree_input(tree, pt)
#TODO write checks
check_prune_tree_input(tree, pt)
#TODO write checks
check_prune_tree_input(tree, pt)
locs <- pt
load_all()
check_prune_tree_input(tree, pt)
l<-subtrees(test_tr)
### plot all the subtrees
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(6,4))
l
l <- order(l, Ntip(l))
Ntip(l)
apply(Ntip, l)
apply(l, Ntip)
sapply(l, Ntip)
#find the order of tree size
order(sapply(l, Ntip))
#find the order of tree size
order(sapply(first_sts, Ntip), decreasing = FALSE)
sapply(first_sts, Ntip)
#find the order of tree size
order(as.numeric(sapply(first_sts, Ntip)), decreasing = FALSE)
as.numeric(sapply(first_sts, Ntip))
#find the order of tree size
sort(as.numeric(sapply(first_sts, Ntip)), decreasing = FALSE)
#find the order of tree size
subtr_sizes <- as.numeric(sapply(first_sts, Ntip))
subtr_sizes
order(subtr_sizes, decreasing = FALSE)
set.seed(1)
test_tr <- ape::rtree(25)
patients <- sample(c('A','B', 'C', 'D', 'E', 'F', 'G'), 25, replace = TRUE)
test_tr <- phytools::midpoint.root(test_tr)
names(patients) <- test_tr$tip.label
plot_pat <- c(patients, rep(NA, ape::Nnode(test_tr)))
ggtree::ggtree(test_tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_pat), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
### Extract the subtrees
l<-subtrees(test_tr)
### plot all the subtrees
for (i in 1:length(l)) plot(l[[i]], sub=paste("Node", l[[i]]$node.label[1]))
par(mfrow=c(6,4))
threshs <- seq(1,19041, by=1)
#frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt, threshs = threshs)
#frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt)
dists
locs
pt
load_all()
#frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt)
pt
pt <- pt
pt
pt <- regentrans::pt
pt
#frac_intra <- get_frac_intra(snv_dists = snv_dists, threshs = threshs)
frac_intra_2 <- get_frac_intra(dists = dists, locs = locs, pt = pt)
View(frac_intra_2)
