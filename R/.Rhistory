test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 30, 40,
20, 0, 26, 50,
30, 26, 0, 57,
40, 50, 57, 0), nrow = 4, ncol = 4))
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("A", "B", "C", "D")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
mat2 <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat2) <- c("A", "B", "C")
colnames(mat2) <- c("A", "B", "C")
test_pt_trans_net2 <- na.omit(data.frame(as.table(as.matrix(mat2))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net2) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net2$n_transfers <- as.numeric(test_pt_trans_net2$n_transfers)
mat3 <- mat
rownames(mat3) <- c(1, 2, 3, 4)
check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
pt_trans_net = test_pt_trans_net, snv_dists = NULL, thresh = 50, dists = test_dists, locs = test_locs, pt = test_pt)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = NULL, thresh = 50, dists = test_dists, locs = test_locs, pt = test_pt)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = "test_snv_dists", thresh = 50, dists = NULL, locs = NULL, pt = NULL)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = test_snv_dists_3, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_locs_fsp <- test_locs
test_locs_fsp[1:4] <- "A"
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
test_tr <- ape::keep.tip(tr,names(test_pt))
test_tr_2 <- ape::keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
devtools::test()
devtools::test()
ape::keep.tip
?ape::keep.tip
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?devtools::test()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
devtools::test_file()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_locs_fsp <- test_locs
test_locs_fsp[1:4] <- "A"
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- ape::keep.tip(tr,names(test_pt))
test_tr_2 <- ape::keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 30, 40,
20, 0, 26, 50,
30, 26, 0, 57,
40, 50, 57, 0), nrow = 4, ncol = 4))
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("A", "B", "C", "D")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% dplyr::filter(source_facil == "A", dest_facil == "A")
get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
?get_snv_dists
test_pt_trans_net
devtools::load_all()
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans = test_pt_trans_net)
devtools::test_file()
devtools::test_file()
devtools::test()
View(test_snv_dists_pt_trans)
View(test_snv_dists_4)
View(test_snv_dists_pt_trans)
View(test_pt_trans_net)
pt_trans_net <- test_pt_trans_net
snv_dists <- test_snv_dists_pt_trans
dists = NULL
locs = NULL
pt = NULL
thresh = 10
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
#make pt_trans_net not factors
pt_trans_net$source_facil <- as.character(pt_trans_net$source_facil)
pt_trans_net$dest_facil <- as.character(pt_trans_net$dest_facil)
#run get_snv_dists if necessary
if(run_snv_dists){
cat("Running get_snv_dists...")
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
}
#subset to only facilities in the locs object
common_locs <- intersect(unique(c(snv_dists$Loc1, snv_dists$Loc2)), unique(c(pt_trans_net$source_facil, pt_trans_net$dest_facil)))
pt_trans_net <- pt_trans_net %>% dplyr::filter(source_facil %in% common_locs,
dest_facil %in% common_locs)
snv_dists <- snv_dists %>% dplyr::filter(Loc1 %in% common_locs,
Loc2 %in% common_locs)
#remove any same-facility pairs
pat_flow <- dplyr::bind_cols(pt_trans_net %>% filter(source_facil != dest_facil))
#instead of all of that we will just left join
pt_trans_summary <- snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n()) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
pt_trans_net <- test_pt_trans_net
snv_dists <- test_snv_dists_pt_trans
#run checks
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh)
#make pt_trans_net not factors
pt_trans_net$source_facil <- as.character(pt_trans_net$source_facil)
pt_trans_net$dest_facil <- as.character(pt_trans_net$dest_facil)
#run get_snv_dists if necessary
if(run_snv_dists){
cat("Running get_snv_dists...")
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
}
#subset to only facilities in the locs object
common_locs <- intersect(unique(c(snv_dists$Loc1, snv_dists$Loc2)), unique(c(pt_trans_net$source_facil, pt_trans_net$dest_facil)))
pt_trans_net <- pt_trans_net %>% dplyr::filter(source_facil %in% common_locs,
dest_facil %in% common_locs)
snv_dists <- snv_dists %>% dplyr::filter(Loc1 %in% common_locs,
Loc2 %in% common_locs)
#remove any same-facility pairs
pat_flow <- dplyr::bind_cols(pt_trans_net %>% filter(source_facil != dest_facil))
pat_flow
snv_dists
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2)
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2)
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n())
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n()) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2)
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n()) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers")
snv_dists %>%
#filter to pairs under the threshold
dplyr::filter(as.numeric(Pairwise_Dists) <= thresh) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = n()) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers")
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
snv_dists_sub <- subset_pairs(snv_dists)
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair"), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs")
ggplot() +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Inter-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Inter-facility pair"), alpha = 0.2, binwidth = 1) +
geom_histogram(data = subset(snv_dists_sub,Pair_Type == "Intra-facility pair" & Pairwise_Dists < 20), mapping = aes(x = Pairwise_Dists, fill = "Intra-facility pair"), alpha = 0.4, binwidth = 1) + labs(x = "Pairwise SNV Distance", y = "Count", fill = "Legend") +  ggtitle("SNV distances of intra- and inter- facility pairs \n< 20 SNV Distance")
frac_intra <- get_frac_intra(snv_dists = snv_dists) #or get_frac_intra(dists = dists, locs = locs, pt = pt)
ggplot(data = frac_intra, aes(x = Thresh, y = Frac_Intra)) + geom_bar(stat = "identity", fill = "blue", alpha = 0.5) + labs(x = "SNV Distance Threshold", y = "Fraction of Intra-Facility Pairs") +  ggtitle("Fraction of Isolate Pairs from the Same \nFacility at Each SNV Distance Threshold") + ylim(0, 1)
cutoff <- 10 #adjust according to your own analysis!
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()) %>% ggplot(aes(x = Loc1, y = n, fill = Pair_Type)) + geom_bar(position = "dodge", stat = "identity") + labs(y = "Number of Closely Related Isolate Pairs", x = "Facility ID", title = "Number of Closely Related Isolate Pairs \nby Facility")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10)
pt_trans
pt_trans %>% mutate(mean_trans = mean(n_1_to_2_transfers, n_2_to_1_transfers))
pt_trans %>% dplyr::mutate(mean_trans = mean(n_1_to_2_transfers, n_2_to_1_transfers))
pt_trans
?mean()
?rowMeans
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(n_1_to_2_transfers, n_2_to_1_transfers)))
a
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(n_1_to_2_transfers, n_2_to_1_transfers))
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(., n_1_to_2_transfers, n_2_to_1_transfers)))
pt_trans
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(., ends_with("transfers")), na.rm = TRUE))
pt_trans
pt_trans %>% mutate(mean_trans = rowMeans(select(., ends_with("transfers")), na.rm = TRUE))
library(dplyr)
pt_trans
pt_trans %>% mutate(mean_trans = 1)
pt_trans %>% mutate(mean_trans = rowMeans(select(., ends_with("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(., startsWith("transfers")), na.rm = TRUE))
pt_trans
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(endsWith("transfers"))
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(dplyr::ends_with("transfers"))
pt_trans
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(4:5)
View(pt_trans)
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(5)
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(where(is.numeric))
pt_trans <- as.data.frame(patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10))
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(where(is.numeric))
devtools::load_all()
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10)
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans
#pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(startsWith("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::select(where(is.numeric))
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans %>% select(dplyr::ends_with("transfers"))
pt_trans %>% dplyr::mutate(mean_trans = mean(select(dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::mutate(mean_trans = mean(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::mutate(mean_trans = mean(select(., dplyr::ends_with("transfers")), na.rm = FALSE))
pt_trans %>% dplyr::mutate(mean_trans = mean(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans %>% select(dplyr::ends_with("transfers")) %>% mean(na.rm = TRUE)
pt_trans %>% dplyr::mutate(mean_trans = mean(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10)
pt_trans %>% dplyr::mutate(mean_trans = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(mean_trans = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "facil_1", "Facil_2" = "facil_2")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue")
#+ labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2"))
Fsp %>% long_form() %>% subset_pairs()
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_trans
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2"))
View(pt_trans)
pt_flow
View(pat_flow)
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
View(pt_flow)
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10)
snv_dists
pt_flow
pt_trans <- patient_transfer(pt_trans_net = pt_flow, snv_dists = snv_dists, thresh = 10) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
ggplot(data = pt_trans, mapping = aes(x = n_transfers, y = n_closely_related_pairs)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Number of Closely Related Isolate Pairs", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Number of Closely Related Isolate Pairs at Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_flow, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_flow, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil"))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_flow, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil"))
pt_flow
pt_flow %>% left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil"))
pt_flow %>% left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::ends_with("transfers")), na.rm = TRUE))
pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
pt_flow_undirected <- pt_flow %>% dplyr::left_join(pt_flow, by = c("source_facil" = "dest_facil", "dest_facil" = "source_facil")) %>% dplyr::mutate(n_transfers = rowMeans(select(., dplyr::starts_with("n_transfers")), na.rm = TRUE))
Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_flow_undirected, by = c("Facil_1" = "source_facil", "Facil_2" = "dest_facil")) %>% ggplot(mapping = aes(x = n_transfers, y = Fsp_val)) + geom_jitter(position = position_jitter(width = 0.2, height = 0.1), alpha = 0.2, color = "blue") + labs(y = "Fsp (population-level similarity)", x = "Number of Transfers", title = "Number of Patient Transfers between Facilities \nvs. Fsp (population-level similarity) between Facilities \nfor Each Facility Pair") + geom_smooth(method = "lm")
View(test_pt_trans_net)
locs
locs %>% table() %>% as.data.frame()
locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_coord
cities <- force(us.cities) %>% filter(!country.etc %in% c("HI", "AK"))
facilities <- unique(locs)
cities_sub <- cities[1:length(facilities),4:5]
facil_coord <- as.data.frame(cbind(facilities, cities_sub))
head(facil_coord)
loc_n <- locs %>% table() %>% as.data.frame() %>% `colnames<-`(c("facilities", "n"))
facil_geo <- facil_coord %>% left_join(loc_n)
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "facil_1", "Facil_2" = "facil_2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
Fsp_geo
Fsp
Fsp %>% long_form() %>% subset_pairs()
pt_trans
Fsp_geo <- Fsp %>% long_form() %>% subset_pairs() %>% left_join(pt_trans, by = c("Facil_1" = "Loc1", "Facil_2" = "Loc2")) %>% left_join(facil_geo, by = c("Facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
size = Fsp_val),
data = Fsp_geo, curvature = 0.33,
alpha = 0.2) +
theme_void() + theme(legend.position = "none")
trans_geo <- pt_trans %>% left_join(facil_geo, by = c("facil_1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("facil_2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
pt_trans
trans_geo <- pt_trans %>% left_join(facil_geo, by = c("Loc1" = "facilities")) %>% rename(facil_1_lat = lat, facil_1_long = long, facil_1_n = n) %>% left_join(facil_geo, by = c("Loc2" = "facilities")) %>% rename(facil_2_lat = lat, facil_2_long = long, facil_2_n = n)
facil_geo %>% ggplot(aes(x=long, y=lat)) +
geom_point(aes(size=n), alpha=0.5, color = "blue") +
borders("state") +
coord_quickmap() +
geom_curve(aes(x = facil_1_long, y = facil_1_lat, xend = facil_2_long, yend = facil_2_lat,
size = n_transfers/max(n_transfers)),
data = trans_geo, curvature = 0.33,
alpha = 0.2) +
theme_void() + theme(legend.position = "none")
pt_trans
nrow(pt_flow)
pt_flow
sqrt(nrow(pt_flow))
length(locs)^2
length(unique(locs))^2
