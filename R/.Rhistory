#column 1 = repeated A, B, C,etc.
rep(unique(locs), each = length(unique(locs)))
cbind(rep(unique(locs), each = length(unique(locs))), unique(locs))
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
cbind(rep(unique(locs), each = 2, c("Inter-facility pair", "Intra-facility pair")))
cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair")))
rep(unique(locs), each = 2)
cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))
setNames(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair")), c("Loc1_mut", "Pair_Type"))
setNames(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair")), c("Loc1_mut", "Pair_Type"))
setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
permut
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n()) %>% mutate(shortcode = paste(substr(Pair_Type, 1, 6), Loc1_mut))
summary
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
left_join(permut, summary)
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
summary
permut
left_join(permut, summary)
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100)
for(i in 1:100){}
for(i in 1:100){
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
left_join(permut, summary)
}
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100){
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary)
}
View(permut)
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100){
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary)
}
left_join(permut, summary)
permut <- left_join(permut, summary)
permut
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary)
permut
Loc1_mut = sample(Loc1)
snv_dists %>% mutate(Loc1_mut = sample(Loc1))
snv_dists %>% mutate(Loc1_mut = sample(Loc1))
snv_dists %>% mutate(Loc1_mut = sample(Loc1))
for(i in 1:100){
summary <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary)
}
permut
permut
summary
permut
summary
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
summary
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
summary
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
permut
left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
permut
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100){
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
View(permut)
t(permut)
c("Loc1", "Pair_Type", 1:100)
colnames(permut) = c("Loc1", "Pair_Type", 1:100)
t(permut)
test <- t(permut)
View(test)
paste(Loc1, Pair_Type)
paste(test$Loc1, test$Pair_Type)
test <- as.data.frame(t(permut))
paste(test$Loc1, test$Pair_Type)
test$Loc1
test[1,]
paste(test[1,], test[2,])
rownames(test) <- paste(test[1,], test[2,])
colnames(test) <- paste(test[1,], test[2,])
test[-1:2,]
test[-c(1:2),]
test <- test[-c(1:2),]
ToothGrowth
View(tree)
permut %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "value")
permut %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
permut_test <- permut %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
View(permut_test)
ggplot(permut_test) + geom_boxplot(x = Loc1, y = value)
permut_test <- permut %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
ggplot(permut_test) + geom_boxplot(x = Loc1, y = value)
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value))
ggplot() + geom_boxplot(data = subset(permut_test, Pair_Type == "Inter-facility pair"), mapping = aes(x = Loc1, y = value), color = "blue")
ggplot() + geom_boxplot(data = subset(permut_test, Pair_Type == "Inter-facility pair"), mapping = aes(x = Loc1, y = value), color = "blue") + geom_boxplot(data = subset(permut_test, Pair_Type == "Intra-facility pair
"), mapping = aes(x = Loc1, y = value), color = "salmon")
ggplot() + geom_boxplot(data = subset(permut_test, Pair_Type == "Inter-facility pair"), mapping = aes(x = Loc1, y = value), color = "blue") + geom_boxplot(data = subset(permut_test, Pair_Type == "Intra-facility pair
"), mapping = aes(x = Loc1, y = value), color = "pink")
ggplot() + geom_boxplot(data = subset(permut_test, Pair_Type == "Inter-facility pair"), mapping = aes(x = Loc1, y = value), color = "blue") + geom_boxplot(data = subset(permut_test, Pair_Type == "Intra-facility pair"), mapping = aes(x = Loc1, y = value), color = "pink")
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type), color = "blue")
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type))
View(snv_dists)
(snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n()))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), x = Loc1, y = n, fill = Pair_Type)
snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())
test <- snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, fill = Pair_Type))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_hue(l=40, c=35)
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_hue(l=40, c=35)
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_hue(l=40, c=35)
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type), values=c("red", "blue"))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue"))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue"))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("blue", "red"))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue"))
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related Isolate Pairs (permuted)", x = "Facility ID", title = "Number of Closely Related Isolate Pairs \nby Facility Permuted Averages with real-value points")
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related Isolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
#column 1 = repeated A, B, C,etc.
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100){
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
colnames(permut) = c("Loc1", "Pair_Type", 1:100)
permut_test <- permut %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100))
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot(permut_test) + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot() + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% sum(is.na(value))
test <- permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value")
sum(is.na(test$value))
?get_snv_dists
unique(snv_dists$Patient1)
snv_dists %>% filter(Pair_Type == "Intra-facility pair")
snv_dists %>% filter(Pair_Type == "Intra-facility pair") %>% mutate(Env_Pair_Type = ifelse(Patient1 < 300 & Patient2 < 300, "pt-pt", ifelse(Patient1 > 300 & Patient2 > 300, "env-env", "pt-env")))
test <- snv_dists %>% filter(Pair_Type == "Intra-facility pair") %>% mutate(Env_Pair_Type = ifelse(Patient1 < 300 & Patient2 < 300, "pt-pt", ifelse(Patient1 > 300 & Patient2 > 300, "env-env", "pt-env")))
snv_dists %>% filter(Pair_Type == "Intra-facility pair") %>% mutate(Env_Pair_Type = ifelse(Patient1 < 300 & Patient2 < 300, "pt-pt", ifelse(Patient1 > 300 & Patient2 > 300, "env-env", "pt-env"))) %>% filter(Pairwise_Dists <= thresh) %>% group_by(Env_Pair_Type) %>% summarize(n = n())
snv_dists %>% filter(Pair_Type == "Intra-facility pair") %>% mutate(Env_Pair_Type = ifelse(Patient1 < 300 & Patient2 < 300, "pt-pt", ifelse(Patient1 > 300 & Patient2 > 300, "env-env", "pt-env"))) %>% filter(Pairwise_Dists <= thresh) %>% group_by(Env_Pair_Type) %>% summarize(n = n()) %>% ggplot() + geom_bar(mapping = aes(x = Env_Pair_Type, y = n), stat = "Identity")
snv_dists %>% filter(Pair_Type == "Intra-facility pair") %>% mutate(Pt_Pair_Type = ifelse(Patient1 < 300 & Patient2 < 300, "pt-pt", ifelse(Patient1 > 300 & Patient2 > 300, "env-env", "pt-env"))) %>% filter(Pairwise_Dists <= thresh) %>% group_by(Pt_Pair_Type) %>% summarize(n = n()) %>% ggplot() + geom_bar(mapping = aes(x = Pt_Pair_Type, y = n), stat = "Identity", fill = "salmon") + labs(y = "Number of Closely Related Isolate Pairs", x = "Sample Pair Type", title = "Number of Closely Related Isolate Pairs \nby Sample Pair Type")
thresh
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
set.seed(10)
for(i in 1:100){
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot() + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
set.seed(10)
for(i in 1:100){
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot() + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
#for reproducibility
set.seed(10)
for(i in 1:100){
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot() + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
permut <- setNames(as.data.frame(cbind(rep(unique(locs), each = 2), c("Inter-facility pair", "Intra-facility pair"))), c("Loc1_mut", "Pair_Type"))
for(i in 1:100){
#for reproducibility
set.seed(i)
summary  <- snv_dists %>% mutate(Loc1_mut = sample(Loc1)) %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1_mut, Pair_Type) %>% summarize(n = n())
permut <- left_join(permut, summary, by = c("Loc1_mut" = "Loc1_mut", "Pair_Type" = "Pair_Type"))
}
permut %>% `colnames<-`(c("Loc1", "Pair_Type", 1:100)) %>% tidyr::pivot_longer(!c(Loc1, Pair_Type), names_to = "run", values_to = "value") %>% ggplot() + geom_boxplot(mapping = aes(x = Loc1, y = value, fill = Pair_Type)) + geom_point(data = (snv_dists %>% filter(Pairwise_Dists <= cutoff) %>% group_by(Loc1, Pair_Type) %>% summarize(n = n())), mapping = aes(x = Loc1, y = n, color = Pair_Type)) + scale_color_manual(values=c("red", "blue")) + labs(y = "Number of Closely Related \nIsolate Pairs (permuted)", x = "Facility ID", title = "Permuted Number of Closely Related Isolate Pairs \nby Facility with real-value points")
library(ape)
library(dplyr)
library(devtools)
library(ggtree)
library(pheatmap)
library(ggplot2)
library(phytools)
library(gridExtra)
#set theme
theme_set(theme_bw() + theme(strip.background = element_rect(fill="white",linetype='blank'), text=element_text(size=15)))
devtools::load_all()
#named list of locations
locs <- regentrans::locs
#named list of patient IDs
pt <- regentrans::pt
#named list of isolate collection dates
dates <- regentrans::dates
#named list of sequence types
st <- NULL
#fasta file
fasta <- regentrans::fasta
#SNV distance matrix
dists <- regentrans::dists
#phylogenetic tree
tree <- regentrans::tr
#patient transfer network
pt_flow <- regentrans::pt_flow
paths = TRUE
class(paths)
paths = FALSE
class(paths)
paths = T
class(paths)
paths = C
nn
paths = "C"
class(paths)
devtools::check()
devtools::test)
devtools::test())
devtools::test()
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
pat_flow <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(pat_flow) <- c("source_facil", "dest_facil", "n_transfers")
pat_flow$n_transfers <- as.numeric(pat_flow$n_transfers)
test_locs <- locs[1:3]
test_pt <- as.character(pt[1:3])
names(test_pt) <- names(pt[1:3])
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without paths returned
test_pt_trans <- patient_transfer(pat_flow, test_snv_dists, thresh = 50)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
pat_flow <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(pat_flow) <- c("source_facil", "dest_facil", "n_transfers")
pat_flow$n_transfers <- as.numeric(pat_flow$n_transfers)
test_locs <- locs[1:3]
test_pt <- as.character(pt[1:3])
names(test_pt) <- names(pt[1:3])
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
devtools::load_all()
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50, paths = FALSE)
pat_flow
test_snv_dists
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
pt_trans_net = pat_flow
snv_dists = test_snv_dists
thresh = 50
dists = NULL
locs = NULL
pt = NULL
paths = FALSE
run_snv_dists <- check_pt_transfer_input(pt_trans_net = pt_trans_net, snv_dists = snv_dists,
dists = dists, locs = locs, pt = pt, thresh = thresh, paths = paths)
run_snv_dists
pt_trans_net$source_facil <- as.character(pt_trans_net$source_facil)
pt_trans_net$dest_facil <- as.character(pt_trans_net$dest_facil)
#run get_snv_dists if necessary
if(run_snv_dists){
cat("Running get_snv_dists...")
snv_dists <- get_snv_dists(dists = dists, locs = locs, pt = pt)
}
#run indirect flow
ind_flow_output <- indirect_flow(pt_trans_net)
pt_trans_net_i <- ind_flow_output$transfer_network
paths <- ind_flow_output$paths
#subset to only facilities in the locs object
common_locs <- intersect(unique(c(snv_dists$Loc1, snv_dists$Loc2)), unique(c(pt_trans_net$source_facil, pt_trans_net$dest_facil)))
pt_trans_net <- pt_trans_net %>% dplyr::filter(source_facil %in% common_locs,
dest_facil %in% common_locs)
snv_dists <- snv_dists %>% dplyr::filter(Loc1 %in% common_locs,
Loc2 %in% common_locs)
#remove any same-facility pairs
pat_flow <- dplyr::bind_cols(pt_trans_net %>% filter(source_facil != dest_facil))
#instead of all of that we will just left join
pt_trans_summary <- snv_dists %>%
mutate(Pairwise_Dists = as.numeric(Pairwise_Dists)) %>%
#group by locations (directed)
dplyr::group_by(Loc1, Loc2) %>%
#summarize how many closely related isolates are in each location pair
dplyr::summarize(n_closely_related_pairs = sum(Pairwise_Dists <= thresh)) %>%
#remove locations that are the same
dplyr::filter(Loc1 != Loc2) %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pat_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("n_1_to_2_transfers" = "n_transfers") %>%
#add in patient transfers from 2 to 1
dplyr::left_join(pat_flow, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("n_2_to_1_transfers" = "n_transfers") %>%
#add in indirect flow 1 to 2
dplyr::left_join(pt_trans_net_i, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil")) %>%
dplyr::rename("indirect_flow_metric_1_to_2" = "pt_trans_metric") %>%
#add in indirect flow 2 to 1
dplyr::left_join(pt_trans_net_i, by = c("Loc2" = "source_facil", "Loc1" = "dest_facil")) %>%
dplyr::rename("indirect_flow_metric_2_to_1" = "pt_trans_metric")
#make df
pt_trans_summary <- as.data.frame(pt_trans_summary)
pt_trans_summary
paths
#return paths and summary as a list
returns <- list("pt_trans_summary" = pt_trans_summary, "paths" = paths)
pt_trans_summary
patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans_paths <- patient_transfer(pat_flow, test_snv_dists, thresh = 50, paths = TRUE)
devtools::load_all()
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
devtools::load_all()
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
devtools::load_all()
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
devtools::load_all()
test_pt_trans <- patient_transfer(pt_trans_net = pat_flow, snv_dists = test_snv_dists, thresh = 50)
test_pt_trans_paths <- patient_transfer(pat_flow, test_snv_dists, thresh = 50, paths = TRUE)
View(test_snv_dists)
View(test_pt_trans_paths)
View(test_pt_trans)
ncol(test_pt_trans)
colnames(test_pt_trans)
ncol(test_pt_trans) == 7
all(colnames(test_pt_trans) == c("Loc1", "Loc2", "n_closely_related_pairs", "n_1_to_2_transfers", "n_2_to_1_transfers", "indirect_flow_metric_1_to_2", "indirect_flow_metric_2_to_1"))
sapply(test_pt_trans, class)
all(sapply(test_pt_trans, class) == c("character", "character", "integer", "numeric", "numeric", "numeric", "numeric"))
nrow(test_pt_trans) <= nrow(pat_flow)
length(test_pt_trans_paths) == 2
class(test_pt_trans_paths)
class(test_pt_trans_paths) == "list"
sapply(test_pt_trans_paths, class)
all(sapply(test_pt_trans_paths, class) == c("data.frame", "list"))
names(test_pt_trans_paths)
all(names(test_pt_trans_paths) == c("pt_trans_summary", "paths"))
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
pat_flow <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(pat_flow) <- c("source_facil", "dest_facil", "n_transfers")
pat_flow$n_transfers <- as.numeric(pat_flow$n_transfers)
pat_flow
test_i_flow <- indirect_flow(pat_flow)
test_i_flow
test_i_flow_returns <- indirect_flow(pat_flow)
#separate into paths and summary
test_i_flow_paths <- test_i_flow_returns$paths
test_i_flow_summary <- test_i_flow_returns$transfer_network
class(test_i_flow_returns)
length(test_i_flow_returns) == 2
all(names(test_i_flow_returns) == c("pt_trans_summary", "paths"))
names(test_i_flow_returns)
all(names(test_i_flow_returns) == c("transfer_network", "paths"))
all(sapply(test_i_flow_returns, class) == c("data.frame", "list"))
sapply(test_i_flow_returns, class)
class(test_i_flow_returns$transfer_network)
any(class(test_i_flow_returns$transfer_network) == "data.frame")
class(test_i_flow_returns$paths) == "list"
View(test_i_flow_paths)
length(test_i_flow_returns$paths)
names(test_i_flow_returns$paths)
all(names(test_i_flow_returns$paths) == c("vpath", "epath", "predecessors", "inbound_edges"))
sapply(test_i_flow_returns$paths, class)
test_i_flow_net <- test_i_flow_returns$transfer_network
View(test_i_flow_net)
class(test_i_flow_net)
any(class(test_i_flow_net) == "data.frame")
ncol(test_i_flow_net) == 3
colnames(test_i_flow_net)
colnames(test_i_flow_net) == c("source_facil", "dest_facil", "pt_trans_metric")
all(colnames(test_i_flow_net) == c("source_facil", "dest_facil", "pt_trans_metric"))
sapply(test_i_flow_net, class)
all(sapply(test_i_flow_net, class) == c("character", "character", "numeric"))
nrow(test_i_flow_net)
nrow(pat_flow)
nrow(test_i_flow_net) == nrow(pat_flow)
pat_flow
pat_flow[-3,]
test_pt_flow_nas <- indirect_flow(pat_flow[-3,])
test_pt_flow_nas
is.na(test_pt_flow_nas$transfer_network$pt_trans_metric)
sum(is.na(test_pt_flow_nas$transfer_network$pt_trans_metric))
sum(is.na(test_pt_flow_nas$transfer_network$pt_trans_metric)) == 2
test_pt_flow_nas$transfer_network
test_pt_flow_nas$transfer_network[is.na(test_pt_flow_nas$transfer_network)]
test_pt_flow_nas$transfer_network[is.na(test_pt_flow_nas$transfer_network)] <- 0
test_pt_flow_nas
devtools::load_all()
test_pt_flow_nas <- indirect_flow(pat_flow[-3,])
sum(is.na(test_pt_flow_nas$transfer_network$pt_trans_metric)) == 0
test_pt_flow_nas$transfer_network$pt_trans_metric
dists
dists <- regentrans::dists
locs = regentrans::locs
pt_trans_net = regentrans::pt_flow
check_get_snv_dists_input(dists, locs, pt, pt_trans_net)
isolates <- intersect(names(locs), rownames(dists))
loc_sub <- locs[isolates]
#subset dists to isolates
dists_sub <- dists[isolates, isolates]
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists_sub))))
#change freq colname?
colnames(snps) <- c("Isolate1", "Isolate2", "Pairwise_Dists")
#add locs
snps$Loc1 <- loc_sub[snps$Isolate1]
snps$Loc2 <- loc_sub[snps$Isolate2]
snp_facility_pairs <- dplyr::bind_cols(snps %>% filter(Isolate1 != Isolate2) %>% dplyr::mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
snp_facility_pairs
pt_flow <- patient_transfer(pt_trans_net = pt_trans_net, snv_dists = snp_facility_pairs, paths = FALSE)
pt_flow
snp_facility_pairs %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pt_flow, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil"))
snp_facility_pairs %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pt_flow, by = c("Loc1" = "Loc1", "Loc2" = "Loc2"))
snp_facility_pairs %>%
#add in patient transfers from 1 to 2
dplyr::left_join(pt_flow, by = c("Loc1" = "Loc1", "Loc2" = "Loc2")) %>% select(-n_closely_related_pairs)
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::test()
devtools::load_all()
devtools::test()
getwd()
test_file("/Users/sophiehoffman/Desktop/regentrans/tests/testthat/test-checks.R")
test_file("/Users/sophiehoffman/Desktop/regentrans/tests/testthat/test-get_clisters.R")
test_file("/Users/sophiehoffman/Desktop/regentrans/tests/testthat/test-get_clusters.R")
test_locs <- locs[1:10]
test_tr <- ape::keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
test_locs <- regentrans::locs[1:10]
test_tr <- ape::keep.tip(regentrans::tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
test_locs <- regentrans::locs[1:10]
test_tr <- ape::keep.tip(regentrans::tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
devtools::load_all()
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
devtools::load_all()
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
?do.call
devtools::load_all()
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
test_file("/Users/sophiehoffman/Desktop/regentrans/tests/testthat/test-get_clusters.R")
devtools::test()
devtools::test()
