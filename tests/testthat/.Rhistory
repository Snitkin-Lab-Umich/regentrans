plot_facil <- c(facils, rep(NA, ape::Nnode(tr)))
ggtree::ggtree(tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_facil), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
clusts$pure_subtree_info
set.seed(1)
test_tr_2 <- ape::rtree(25)
facils <- sample(c('A','B'), 25, replace = TRUE)
names(facils) <- test_tr_2$tip.label
test_subtr_2 <- ape::subtrees(test_tr_2)
test_pure_subtrees_2 <- get_largest_subtree(subtrs = test_subtr_2, isolate_labels = facils, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees_2)
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
View(test_pure_subtree_info)
sum(test_pure_subtree_info$subtr_size)
length(test_locs)
test_clusts <- get_clusters(test_tr_2, facils)
test_clusts$pure_subtree_info
sum_sizes <- sum(clusts$pure_subtree_info$subtr_size)
sum_sizes == ape::Ntip(tr)
st_tiplabs <- sapply(1:nrow(clusts$pure_subtree_info), function(x){
i <- clusts$pure_subtree_info$index[x]
name <- clusts$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- clusts$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(tr)
st_tiplabs
st_tiplabs
test_clusts$pure_subtree_inf
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(test_tr)
sum(test_pure_subtrees_2$largest_st)
sapply(test_pure_subtrees_2$largest_st, sum)
sum(sapply(test_pure_subtrees_2$largest_st, sum))
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
sl <- reverse_list_str(ls)
ls
sl
z <- list(z1 = list(a = 1, b = 2, c = 3), z2 = list(b = 4, a = 1, c = 0))
o <- list(a = list(z1 = 1, z2 = 1), b = list(z1 = 2, z2 = 4), c = list(z1 = 3, z2 = 0))
oz <- reverse_list_str(z)
z
o
oz
o == oz
names(0)
names(o)
names(z)
names(oz)
all(names(o) == names(oz))
all(names(o) == names(z))
intersect(names(o),names(z))
intersect(names(o),names(z))
length(intersect(names(o), names(z)))
length(intersect(names(o), names(z))) == 0
#contents of o and oz are the same
oz[[1]]
unlist(oz[[1]])
unlist(o[[1]])
all(unlist(oz[[1]]) == unlist(o[[1]]))
expect_true(all(unlist(oz[[2]]) == unlist(o[[2]])))
all(unlist(oz[[2]]) == unlist(o[[2]]))
oz
all(unlist(oz[[3]]) == unlist(o[[3]]))
test_locs <- locs[1:4]
test_pt <- pt[1:4]
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_locs <- locs[1:4]
test_pt <- pt[1:4]
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_subset_pairs <- subset_pairs(test_snv_dists)
View(test_subset_pairs)
View(test_snv_dists)
nrow(test_subset_pairs) == nrow(test_snv_dists)*.5
nrow(test_subset_pairs) == length(locs)^2 - length(locs)
nrow(test_subset_pairs) == length(test_locs)^2 - length(test_locs)
length(test_locs)^2 - length(test_locs)
length(test_locs)^2 - length(test_locs)*2
length(test_locs)*(length(test_locs)-1)
factorial(length(test_locs)-1)
length(test_locs)
length(test_locs)-1
sum(((length(test_locs)-1)^2 + length(test_locs)-1)/2)
sum(1:(length(test_locs)-1))
1:(length(test_locs)-1)
nrow(test_subset_pairs) == sum(1:(length(test_locs)-1))
paste(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
cbind(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2))
length(test_locs)-1
table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)) == (length(test_locs)-1)
all(table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)) == (length(test_locs)-1))
library(testthat)
load_all()
getwd()
devtools::test()
z <- list(z1 = list(a = 1, b = 2, c = 3), z2 = list(b = 4, a = 1, c = 0))
o <- list(a = list(z1 = 1, z2 = 1), b = list(z1 = 2, z2 = 4), c = list(z1 = 3, z2 = 0))
oz <- reverse_list_str(z)
intersect(names(o), names(z))
length(intersect(names(o), names(z))) == 0
load_all()
devtools::test()
testthat::test_dir()
getwd()
testthat::test_dir(".")
?devtools::test
devtools::test(stop_on_failure = TRUE)
devtools::check_failures(".")
devtools::check()
??bind_cols
??keep.tip
?keep.tip
class(fasta)
all(class(fasta) != "DNAbin")
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
document()
load_all()
devtools::check()
devtools::test()
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
pat_flow <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(pat_flow) <- c("source_facil", "dest_facil", "n_transfers")
pat_flow$n_transfers <- as.numeric(pat_flow$n_transfers)
View(pat_flow)
#edit the network to make sure pairs exist forward and backward
pt_trans_net <- pat_flow
tmp <- data.frame(x=gl(2,3, labels=letters[24:25]),
y=gl(3,1,6, labels=letters[1:3]),
z=c(1,2,3,3,3,2))
tmp
#edit the network to make sure pairs exist forward and backward
#make a dataframe?
pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
#edit the network to make sure pairs exist forward and backward
#make a dataframe?
dplyr::pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
#edit the network to make sure pairs exist forward and backward
#make a dataframe?
tidyr::pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
#edit the network to make sure pairs exist forward and backward
#make a dataframe?
tidy_pt_trans_net <- tidyr::pivot_wider(pt_trans_net, names_from = source_facil, values_from = n_transfers)
data.frame(as.table(as.matrix(tidy_pt_trans_net)))
na.omit(data.frame(as.table(as.matrix(tidy_pt_trans_net))))
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% select(Var2 != "dest_facil")
library(ape)
library(dplyr)
library(devtools)
library(phytools)
load_all()
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% select(Var2 != "dest_facil")
data.frame(as.table(as.matrix(tidy_pt_trans_net)))
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% filter(Var2 != "dest_facil")
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% filter(Var2 != "dest_facil") %>% `colnames<-`(c("source_facil", "dest_facil", "n_transfers"))
pt_trans_net
pt_trans_net_2 <- pt_trans_net[3:nrow(pt_trans_net)]
pt_trans_net_2 <- pt_trans_net[3:nrow(pt_trans_net),]
#edit the network to make sure pairs exist forward and backward
#make a dataframe?
tidy_pt_trans_net <- tidyr::pivot_wider(pt_trans_net_2, names_from = source_facil, values_from = n_transfers)
tidy_pt_trans_net
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% filter(Var2 != "dest_facil") %>% `colnames<-`(c("source_facil", "dest_facil", "n_transfers"))
isSymmetric(tidy_pt_trans_net)
tidy_pt_trans_net
as.matrix(tidy_pt_trans_net)
tidy_pt_trans_net[,2:ncol(tidy_pt_trans_net)]
as.matrix(tidy_pt_trans_net[,2:ncol(tidy_pt_trans_net)])
as.matrix(tidy_pt_trans_net[2:ncol(tidy_pt_trans_net),2:ncol(tidy_pt_trans_net)])
tidy_pt_trans_net[2:ncol(tidy_pt_trans_net),2:ncol(tidy_pt_trans_net)]
tidy_pt_trans_net[2:nrow(tidy_pt_trans_net),2:ncol(tidy_pt_trans_net)]
as.matrix(tidy_pt_trans_net[,2:ncol(tidy_pt_trans_net)])
isSymmetric(as.matrix(tidy_pt_trans_net[,2:ncol(tidy_pt_trans_net)]))
#if the matrix is symmetric
#symmetry <- isSymmetric(as.matrix(tidy_pt_trans_net[,2:ncol(tidy_pt_trans_net)]))
data.frame(as.table(as.matrix(tidy_pt_trans_net))) %>% filter(Var2 != "dest_facil") %>% `colnames<-`(c("source_facil", "dest_facil", "n_transfers"))
#checks
check_get_snv_dists_input(dists, locs, pt, pt_trans_net)
#check pt if it isn't missing
if(!is.null(pt)){
#subset pt and locs to represent the same isolates,
#and make sure we only subset to the rownames dists has in common
isolates <- intersect(intersect(names(locs), names(pt)), rownames(dists))
#subset pt
pt_sub <- pt[isolates]
}
else{
#make the subsetted isolates object if there is no pt
isolates <- intersect(names(locs), rownames(dists))
}
#subset by locs
#list ones in common before subsetting
loc_sub <- locs[isolates]
#subset dists to isolates
dists_sub <- dists[isolates, isolates]
#make df
snps <- na.omit(data.frame(as.table(as.matrix(dists_sub))))
#change freq colname?
colnames(snps) <- c("Isolate1", "Isolate2", "Pairwise_Dists")
#add locs
snps$Loc1 <- loc_sub[snps$Isolate1]
snps$Loc2 <- loc_sub[snps$Isolate2]
#do pt stuff
if(!is.null(pt)){
#add pts
snps$Patient1 <- pt_sub[snps$Isolate1]
snps$Patient2 <- pt_sub[snps$Isolate2]
#add labels
snp_facility_pairs <- dplyr::bind_cols(snps %>% filter(Patient1 != Patient2) %>% mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
}
else{
#add labels
snp_facility_pairs <- dplyr::bind_cols(snps %>% filter(Isolate1 != Isolate2) %>% mutate(Pair_Type=ifelse(Loc1==Loc2,'Intra-facility pair','Inter-facility pair')))
}
snp_facility_pairs
View(snp_facility_pairs)
snp_facility_pairs <- snp_facility_pairs %>% dplyr::left_join(pt_trans_net, by = c("Loc1" = "source_facil", "Loc2" = "dest_facil"))
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_4
test_pt_trans_net
test_snv_dists
test_pt_trans_net_5 <- test_pt_trans_net_4 %>% filter(source_facil == "A", dest_facil == "A")
test_pt_trans_net_5
check_pt_transfer_input(pt_trans_net = test_pt_trans_net_5, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
test_pt_trans_net_5
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
check_pt_transfer_input(pt_trans_net = test_pt_trans_net_5, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
load_all()
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_snv_dists_pt_trans
ncol(test_snv_dists_pt_trans)
sapply(test_snv_dists_pt_trans, class)
class(test_snv_dists_pt_trans[,9])
class(test_snv_dists_pt_trans[,9]) == "character"
test_snv_dists_pt_trans
load_all()
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
class(test_snv_dists_pt_trans[,9])
test_snv_dists_pt_trans_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs, pt = NULL, pt_trans_net = test_pt_trans_net)
ncol(test_snv_dists_pt_trans_no_pt) == 7
get_frac_intra(test_snv_dists_pt_trans)
load_all()
get_frac_intra(test_snv_dists_pt_trans)
load_all()
get_frac_intra(test_snv_dists_pt_trans)
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
test_snv_dists_pt_trans
is.null(check_get_snv_dists_input(dists = test_snv_dists_pt_trans))
is.null(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans))
is.null(check_get_frac_intra_input(dists = test_snv_dists_pt_trans))
is.null(check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL))
check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL))
check_get_frac_intra_input(snv_dists = test_snv_dists_pt_trans, threshs = seq(1,50,1), dists = NULL, locs = NULL, pt = NULL)
check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
load_all()
check_get_frac_intra_input(snv_dists = NULL, threshs = seq(1,50,1), dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
load_all()
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans_net <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_frac_intra_pt_trans_net <- get_frac_intra(snv_dists = test_snv_dists_pt_trans_net, threshs = test_threshs)
test_threshs <- seq(1,50,1)
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_threshs <- seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans_net <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_frac_intra_pt_trans_net <- get_frac_intra(snv_dists = test_snv_dists_pt_trans_net, threshs = test_threshs)
test_frac_intra_pt_trans_net
ncol(test_frac_intra_pt_trans_net) == 5
nrow(test_frac_intra_pt_trans_net) <= length(test_threshs)
all(colnames(test_frac_intra_pt_trans_net) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter'))
all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric"))
all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0)
all((test_frac_intra_pt_trans_net$Frac_inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_inter == 0)
length(intersect(test_frac_intra_pt_trans_net$Thresh, test_threshs)) == nrow(test_frac_intra_pt_trans_net)
load_all()
document()
devtools::test()
check_get_snv_dists_input(dists = test_dists)
check_get_snv_dists_input(dists = "test_dists", locs = test_locs)
devtools::test()
load_all()
devtools::test()
load_all()
devtools::test()
setdiff("You have not provided locations of at least 2 isolates in your SNV distance matrix (dists). Please provide locations for at least 2 isolates in your SNV distance matrix.",
"You have not provided locations of at least 2 isolates in your SNV distance matrix (dists). Please provide locations for at least 2 isolates in your SNV distance matrix.")
load_all()
devtools::test()
load_all()
devtools::test()
devtools::test()
#warnings
#dist names being a subset of locs names
capture_warnings(check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL))
load_all()
devtools::test()
warnings[1]
#warnings
#dist names being a subset of locs names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL))
warnings[1]
setdiff(warnings[1], "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset")
t
devtools::test()
"You have supplied a list of more isolates \(n =  4 \) with locations than exist in your SNV distance matrix  \(n =  3 \)\. Will subset"
warnings[1] == "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset"
devtools::test()
devtools::test()
# expect_warning(
#   check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL),
#   "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset",
#   "You have provided an isolate location vector of fewer isolates than are contained in your SNV distance matrix (dists). Will subset"
# )
#locs names being a subset of dists names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists, locs = test_locs_3, pt = test_pt, pt_trans_net=NULL))
warnings
warnings[3] == "You have not supplied patient IDs (pt) and locations (locs) for the same samples. We will these vectors so that they contain the same isolates."
warnings[3] == "You have not supplied patient IDs (pt) and locations (locs) for the same samples. We will subset these vectors so that they contain the same isolates."
devtools::test()
#pt names being a subset of dists names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = test_pt_3, pt_trans_net=NULL))
warnings[2]
devtools::test()
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
is.null(check_get_snv_dists_input(test_dists, test_locs, test_pt, pt_trans_net=NULL))
check_get_snv_dists_input(dists = test_dists, pt_trans_net=NULL)
devtools::test()
check_get_snv_dists_input(dists = test_dists, pt_trans_net=NULL)
check_get_snv_dists_input(locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, pt = test_pt, pt_trans_net=NULL)
check_get_snv_dists_input(dists = "test_dists", locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = "test_locs", pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = "test_pt", pt_trans_net=NULL)
