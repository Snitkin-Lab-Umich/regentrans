#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans_net <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_frac_intra_pt_trans_net <- get_frac_intra(snv_dists = test_snv_dists_pt_trans_net, threshs = test_threshs)
test_threshs <- seq(1,50,1)
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_threshs <- seq(1,50,1)
test_frac_intra <- get_frac_intra(snv_dists = test_snv_dists, threshs = test_threshs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans_net <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_frac_intra_pt_trans_net <- get_frac_intra(snv_dists = test_snv_dists_pt_trans_net, threshs = test_threshs)
test_frac_intra_pt_trans_net
ncol(test_frac_intra_pt_trans_net) == 5
nrow(test_frac_intra_pt_trans_net) <= length(test_threshs)
all(colnames(test_frac_intra_pt_trans_net) == c('Thresh','n_Intra','n_Inter','Frac_Intra','Frac_Inter'))
all(sapply(test_frac_intra_pt_trans_net, class) == c("numeric", "numeric", "numeric", "numeric", "numeric"))
all((test_frac_intra_pt_trans_net$Frac_Intra == test_frac_intra_pt_trans_net$n_Intra/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_Intra == 0)
all((test_frac_intra_pt_trans_net$Frac_inter == test_frac_intra_pt_trans_net$n_Inter/(test_frac_intra_pt_trans_net$n_Intra + test_frac_intra_pt_trans_net$n_Inter)) | test_frac_intra_pt_trans_net$Frac_inter == 0)
length(intersect(test_frac_intra_pt_trans_net$Thresh, test_threshs)) == nrow(test_frac_intra_pt_trans_net)
load_all()
document()
devtools::test()
check_get_snv_dists_input(dists = test_dists)
check_get_snv_dists_input(dists = "test_dists", locs = test_locs)
devtools::test()
load_all()
devtools::test()
load_all()
devtools::test()
setdiff("You have not provided locations of at least 2 isolates in your SNV distance matrix (dists). Please provide locations for at least 2 isolates in your SNV distance matrix.",
"You have not provided locations of at least 2 isolates in your SNV distance matrix (dists). Please provide locations for at least 2 isolates in your SNV distance matrix.")
load_all()
devtools::test()
load_all()
devtools::test()
devtools::test()
#warnings
#dist names being a subset of locs names
capture_warnings(check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL))
load_all()
devtools::test()
warnings[1]
#warnings
#dist names being a subset of locs names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL))
warnings[1]
setdiff(warnings[1], "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset")
t
devtools::test()
"You have supplied a list of more isolates \(n =  4 \) with locations than exist in your SNV distance matrix  \(n =  3 \)\. Will subset"
warnings[1] == "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset"
devtools::test()
devtools::test()
# expect_warning(
#   check_get_snv_dists_input(dists = test_dists_2, locs = test_locs, pt = test_pt, pt_trans_net=NULL),
#   "You have supplied a list of more isolates (n =  4 ) with locations than exist in your SNV distance matrix (n =  3 ). Will subset",
#   "You have provided an isolate location vector of fewer isolates than are contained in your SNV distance matrix (dists). Will subset"
# )
#locs names being a subset of dists names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists, locs = test_locs_3, pt = test_pt, pt_trans_net=NULL))
warnings
warnings[3] == "You have not supplied patient IDs (pt) and locations (locs) for the same samples. We will these vectors so that they contain the same isolates."
warnings[3] == "You have not supplied patient IDs (pt) and locations (locs) for the same samples. We will subset these vectors so that they contain the same isolates."
devtools::test()
#pt names being a subset of dists names
warnings <- capture_warnings(check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = test_pt_3, pt_trans_net=NULL))
warnings[2]
devtools::test()
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
is.null(check_get_snv_dists_input(test_dists, test_locs, test_pt, pt_trans_net=NULL))
check_get_snv_dists_input(dists = test_dists, pt_trans_net=NULL)
devtools::test()
check_get_snv_dists_input(dists = test_dists, pt_trans_net=NULL)
check_get_snv_dists_input(locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, pt = test_pt, pt_trans_net=NULL)
check_get_snv_dists_input(dists = "test_dists", locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = "test_locs", pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = "test_pt", pt_trans_net=NULL)
load_all()
library(devtools)
load_all()
devtools::test()
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_snv_dists_pt_trans_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs, pt = NULL, pt_trans_net = test_pt_trans_net)
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_snv_dists_pt_trans_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs, pt = NULL, pt_trans_net = test_pt_trans_net)
library(ape)
library(dplyr)
library(devtools)
library(phytools)
library(ape)
library(dplyr)
library(devtools)
library(phytools)
test_locs <- locs[1:4]
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_dists <- dists[names(test_locs), names(test_locs)]
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_snv_dists_pt_trans_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs, pt = NULL, pt_trans_net = test_pt_trans_net)
test_dists
test_locs
test_pt_trans_net
test_locs <- locs[1:3]
test_pt <- as.character(pt[1:3])
names(test_pt) <- names(pt[1:3])
test_dists <- dists[names(test_locs), names(test_locs)]
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
mat <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat) <- c("A", "B", "C")
colnames(mat) <- c("A", "B", "C")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_snv_dists_pt_trans <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt, pt_trans_net = test_pt_trans_net)
test_snv_dists_pt_trans_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs, pt = NULL, pt_trans_net = test_pt_trans_net)
test_pt_trans_net
test_dists
test_locs
ncol(test_snv_dists) == 8
nrow(test_snv_dists) == (length(test_locs)^2)-length(test_locs)
test_that("get_snv_dists works", {
#for with pt
#check col #s
expect_true(ncol(test_snv_dists) == 8)
#check row #s
expect_true(nrow(test_snv_dists) == (length(test_locs)^2)-length(test_locs))
#check colnames
expect_true(all(colnames(test_snv_dists) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Patient1", "Patient2", "Pair_Type")))
#check col types
expect_true(all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "character", "character", "character")))
#check isolates in both lists are in the locs names
expect_true(all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs)))))
#same with patients
expect_true(all(setequal(unique(test_snv_dists$Patient1), unique(test_snv_dists$Patient2)) & setequal(unique(test_snv_dists$Patient2), unique(test_pt))))
#same with locs
expect_true(all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs))))
#for without pt
expect_true(ncol(test_snv_dist_no_pt) == 6)
#check row #s
expect_true(nrow(test_snv_dist_no_pt) == (length(test_locs)^2)-length(test_locs))
#check colnames
expect_true(all(colnames(test_snv_dist_no_pt) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Pair_Type")))
#check col types
#this won't be true when all of the patients IDs aren't numeric
expect_true(all(sapply(test_snv_dist_no_pt, class) == c("factor", "factor", "numeric", "character", "character", "character")))
#check isolates in both lists are in the locs names
expect_true(all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs)))))
#same with locs
expect_true(all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs))))
#one with pt_trans net and pt
expect_true(ncol(test_snv_dists_pt_trans) == 9)
#check coltypes
expect_true(class(test_snv_dists_pt_trans[,9]) == "numeric")
#one with pt_trans_net and no pt
expect_true(ncol(test_snv_dists_pt_trans_no_pt) == 7)
})
nrow(test_snv_dists) == (length(test_locs)^2)-length(test_locs)
all(colnames(test_snv_dists) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Patient1", "Patient2", "Pair_Type"))
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "character", "character", "character"))
all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs))))
all(setequal(unique(test_snv_dists$Patient1), unique(test_snv_dists$Patient2)) & setequal(unique(test_snv_dists$Patient2), unique(test_pt)))
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
ncol(test_snv_dist_no_pt) == 6
nrow(test_snv_dist_no_pt) == (length(test_locs)^2)-length(test_locs)
all(colnames(test_snv_dist_no_pt) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Pair_Type"))
all(sapply(test_snv_dist_no_pt, class) == c("factor", "factor", "numeric", "character", "character", "character"))
all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs))))
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
ncol(test_snv_dists_pt_trans) == 9
class(test_snv_dists_pt_trans[,9]) == "numeric"
ncol(test_snv_dists_pt_trans_no_pt) == 7
devtools::test()
devtools::test()
warnings()
load_all()
devtools::test()
load_all()
devtools::test()
mat <- data.frame(matrix(data = c(0, 20, 30, 40,
20, 0, 26, 50,
30, 26, 0, 57,
40, 50, 57, 0), nrow = 4, ncol = 4))
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("A", "B", "C", "D")
mat
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
test_pt_trans_net
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
test_snv_dists_pt_trans
test_dists
devtools::test()
devtools::test()
library(ape)
library(dplyr)
library(devtools)
library(phytools)
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
mat <- data.frame(matrix(data = c(0, 20, 30, 40,
20, 0, 26, 50,
30, 26, 0, 57,
40, 50, 57, 0), nrow = 4, ncol = 4))
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("A", "B", "C", "D")
test_pt_trans_net <- na.omit(data.frame(as.table(as.matrix(mat))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net$n_transfers <- as.numeric(test_pt_trans_net$n_transfers)
test_pt_trans_net_2 <- test_pt_trans_net[,2:ncol(test_pt_trans_net)]
test_pt_trans_net_3 <- test_pt_trans_net
colnames(test_pt_trans_net_3) <- c("A", "B", "C")
test_pt_trans_net_4 <- test_pt_trans_net
test_pt_trans_net_4$n_transfers <- as.character(test_pt_trans_net_4$n_transfers)
test_pt_trans_net_5 <- test_pt_trans_net %>% filter(source_facil == "A", dest_facil == "A")
test_snv_dists_pt_trans <- get_snv_dists(test_dists, test_locs, test_pt, test_pt_trans_net)
is.null(check_get_snv_dists_input(test_dists, test_locs, test_pt, pt_trans_net=NULL))
is.null(check_get_snv_dists_input(test_dists, test_locs, pt=NULL, pt_trans_net=NULL))
check_get_snv_dists_input(dists = test_dists, pt_trans_net=NULL)
check_get_snv_dists_input(locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, pt = test_pt, pt_trans_net=NULL)
check_get_snv_dists_input(dists = "test_dists", locs = test_locs, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = "test_locs", pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = "test_pt", pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs_2, pt = test_pt, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs, pt = test_pt_2, pt_trans_net=NULL)
check_get_snv_dists_input(dists = test_dists, locs = test_locs_4, pt = test_pt, pt_trans_net=NULL)
devtools::test()
devtools::test()
expect_error(
check_get_snv_dists_input(dists = test_dists, locs = test_locs_4, pt = test_pt, pt_trans_net=NULL),
"You have only supplied locations for 1 isolates. Please supply a named vector of locations for at least 2 isolates"
)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
is.null(check_facility_fsp_input(fasta = test_fasta_2, locs = test_locs_5, form = "matrix"))
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "matrix")
is.null(check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a", "t")))
is.null(check_allele_freq_input(x = test_fasta, subset = c(TRUE, FALSE, TRUE), allele_n = 1, alleles = c("a", "t")))
check_allele_freq_input(x = "test_fasta", subset = NULL, allele_n = 1, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = "NULL", allele_n = 1, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 7, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = "1", alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = "t")
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a","t","g"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c(1, "t"))
devtools::test()
check_pt_transfer_input(pt_trans_net = test_pt_trans_net, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
test_pt_trans_net
test_snv_dists
rownames(mat2) <- c("A", "B", "C")
colnames(mat2) <- c("A", "B", "C")
test_pt_trans_net2 <- na.omit(data.frame(as.table(as.matrix(mat2))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net2) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net2$n_transfers <- as.numeric(test_pt_trans_net2$n_transfers)
mat2 <- data.frame(matrix(data = c(0, 20, 12,
20, 0, 26,
30, 26, 0), nrow = 3, ncol = 3))
rownames(mat2) <- c("A", "B", "C")
colnames(mat2) <- c("A", "B", "C")
test_pt_trans_net2 <- na.omit(data.frame(as.table(as.matrix(mat2))))
#pat_flow <- dplyr::bind_cols(pat_flow %>% filter(Var1 != Var2))
colnames(test_pt_trans_net2) <- c("source_facil", "dest_facil", "n_transfers")
test_pt_trans_net2$n_transfers <- as.numeric(test_pt_trans_net2$n_transfers)
check_pt_transfer_input(pt_trans_net = test_pt_trans_net2, snv_dists = test_snv_dists, thresh = 50, dists = NULL, locs = NULL, pt = NULL)
devtools::test()
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "matrix")
warnings()
test_locs
test_fasta
test_locs_fsp <- test_locs
test_locs_fsp
test_locs_fsp <- c("A", "A", "A", "A")
test_locs_fsp
test_locs_fsp <- test_locs
test_locs_fsp[1:4] <- "A"
test_locs_fsp
check_facility_fsp_input(fasta = test_fasta, locs = test_locs_fsp, form = "matrix")
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "matrix")
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "matrix")
load_all()
check_facility_fsp_input(fasta = test_fasta, locs = test_locs, form = "matrix")
devtools::test()
devtools::check()
devtools::test()
devtools::check()
class(dists) == "matrix"
class(dists) == "matrix" || class(dists) == "data.frame"
test_locs <- locs[1:10]
test_tr <- ape::keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
test_pure_subtree_info
test_tr$tip.label
test_pure_subtree_info$subtr_size
load_all()
document()
devtools::test()
load_all()
document()
devtools::test()
devtools::check()
