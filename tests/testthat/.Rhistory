locs <- test_locs_9
fasta <- test_fasta_3
common_isolates <- intersect(rownames(fasta), names(locs))
common_isolates
length(common_isolates) <
2
(length(common_isolates) != length(locs))
(length(common_isolates) != nrow(fasta))
any(table(locs[locs %in% common_isolates])
< 1)
table(locs[locs %in% common_isolates])
locs[locs %in% common_isolates]
common_isolates
locs
names(locs) %in% common_isolates
locs[names(locs) %in% common_isolates]
table(locs[names(locs) %in% common_isolates])
any(table(locs[names(locs) %in% common_isolates]) < 1)
load_all()
check_facility_fsp_input(fasta = test_fasta_3, locs = test_locs_9, form = "matrix")
library(testthat)
library(regentrans)
test_check("regentrans")
?test_check
getwd()
test_check("/Users/sophiehoffman/Desktop/regentrans/")
test_check("/Users/sophiehoffman/Desktop/regentrans/tests")
test_check("/Users/sophiehoffman/Desktop/regentrans/tests/testthat")
test_check("/Users/sophiehoffman/Desktop/regentrans/tests/testthat/test-checks.R")
is.null(check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a", "t")))
is.null(check_allele_freq_input(x = test_fasta, subset = c(TRUE, FALSE, TRUE), allele_n = 1, alleles = c("a", "t")))
check_allele_freq_input(x = "test_fasta", subset = NULL, allele_n = 1, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = "NULL", allele_n = 1, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 7, alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = "1", alleles = c("a", "t"))
class(allele_n)
class(1)
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = "1", alleles = c("a", "t"))
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = "1", alleles = c("a", "t"))
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = "1", alleles = c("a", "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = "t")
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c(1, "t"))
alleles = c("a", "t")
intersect(alleles, c("a", "c", "t", "g"))
length(intersect(alleles, c("a", "c", "t", "g"))) == 2
alleles = "t"
length(intersect(alleles, c("a", "c", "t", "g"))) == 2)
length(intersect(alleles, c("a", "c", "t", "g"))) == 2
alleles = c(1, "t")
length(intersect(alleles, c("a", "c", "t", "g"))) == 2
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c(1, "t"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a","t","g"))
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = "t")
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a","t","g"))
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a","t","g"))
paste(alleles, sep = " ", collapse = "")
paste(alleles, sep = " ", collapse = " ")
load_all()
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = "t")
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c("a","t","g"))
check_allele_freq_input(x = test_fasta, subset = NULL, allele_n = 1, alleles = c(1, "t"))
is.null(within_pop_var_input_checks(subset_snp_mat = test_fasta, subset = c(TRUE, FALSE, FALSE)))
within_pop_var_input_checks(subset_snp_mat = test_fasta, subset = "TRUE")
within_pop_var_input_checks(subset_snp_mat = "test_fasta", subset = c(TRUE, FALSE, FALSE)
)
within_pop_var_input_checks(subset_snp_mat = "test_fasta", subset = c(TRUE, FALSE, FALSE))
load_all()
within_pop_var_input_checks(subset_snp_mat = "test_fasta", subset = c(TRUE, FALSE, FALSE))
as.list(c("hi", 1, 2, "jk"))
as.list("hi", 1, 2, "jk")
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls
ls[[1]]
ls[[2]]
is.null(check_reverse_list_str_input(ls))
check_reverse_list_str_input("ls")
check_reverse_list_str_input("ls")
load_all()
check_reverse_list_str_input("ls")
subset = "ls"
class(subset)
load_all()
load_all()
check_reverse_list_str_input("ls")
s
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
check_reverse_list_str_input(ls_2)
test_subtr <- ape::subtrees(test_tr)
test_subtr
test_pt
is.null(checl_subtrs(subtrs = test_subtr, isolate_labels = test_pt))
is.null(check_subtrs(subtrs = test_subtr, isolate_labels = test_pt))
check_subtrs(subtrs = "test_subtr", isolate_labels = test_pt)
check_subtrs(subtrs = ls, isolate_labels = test_pt)
check_subtrs(subtrs = test_subtr, isolate_labels = test_pt_2)
check_subtrs(subtrs = test_subtr, isolate_labels = "test_pt")
subtrs = test_subtr
isolate_labels <- test_pt
isolates <- ""
for(i in 1:length(subtrs)){
isolates <- c(isolates, subtrs[[i]]$tip.label)
}
isolates
intersect(isolates, names(isolate_labels))
isolate_labels
isolate_labels = "test_pt"
intersect(isolates, names(isolate_labels)))
intersect(isolates, names(isolate_labels))
length(intersect(isolates, names(isolate_labels)))
length(isolate_labels)
check_subtrs(subtrs = test_subtr, isolate_labels = "test_pt")
is.null(check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt))
is.null(check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1))
check_get_largest_subtree_input(subtrs = "test_subtr", isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = ls, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = "test_pt", control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt_2, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt_3, control_labels = NULL, bootstrap = NULL, pureness = 1)
test_subtr_2 <- ape::subtrees(test_tr_2)
check_get_largest_subtree_input(subtrs = test_subtr_2, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = "NULL", bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = "NULL", bootstrap = NULL, pureness = 1)
load_all()
library(ape)
library(dplyr)
library(devtools)
load_all()
test_locs <- locs[1:4]
test_locs_2 <- locs[5:8]
test_locs_3 <- locs[1:3]
test_locs_4 <- locs[1]
test_locs_5 <- locs[locs %in% c("A", "F", "H")]
test_locs_6 <- locs[1:4]
test_locs_7 <- test_locs_5[1:4]
test_locs_8 <- test_locs_5[2:6]
test_locs_9 <- test_locs_5[1:6]
test_pt <- pt[1:4]
test_pt_2 <- pt[5:8]
test_pt_3 <- pt[1:3]
test_dists <- dists[names(test_locs), names(test_locs)]
test_dists_2 <- dists[names(test_locs_3), names(test_locs_3)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_snv_dists_2 <- test_snv_dists[,2:ncol(test_snv_dists)]
test_snv_dists_3 <- test_snv_dists
colnames(test_snv_dists_3) <- c("A", "B", "C", "D", "E", "F", "G", "H")
test_snv_dists_4 <- test_snv_dists
test_snv_dists_4$Pairwise_Dists <- as.character(test_snv_dists_4$Pairwise_Dists)
test_tr <- keep.tip(tr,names(test_pt))
test_tr_2 <- keep.tip(tr,names(test_pt_3))
test_fasta <- fasta[names(test_locs),]
test_fasta_2 <- fasta[names(test_locs_5),]
test_fasta_3 <- fasta[names(test_locs_9),]
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
ls_2 <- list(list(a = 2, b = 3), list(c = "a", d = "b"), "x")
test_subtr <- ape::subtrees(test_tr)
test_subtr_2 <- ape::subtrees(test_tr_2)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = "NULL", bootstrap = NULL, pureness = 1)
test_subtr
subtrs = test_subtr
isolate_labels = test_pt
control_labels = "NULL"
bootstrap = NULL
pureness = 1
check_locs(isolate_labels)
check_subtrs(subtrs)
check_subtrs_vs_isolate_labs(subtrs, isolate_labels)
check_control_labels(control_labels)
check_subtrs_vs_isolate_labs(subtrs, control_labels)
isolates <- ""
for(i in 1:length(subtrs)){
isolates <- c(isolates, subtrs[[i]]$tip.label)
}
isolates
length(intersect(isolates, names(isolate_labels)))
length(isolate_labels)
length(intersect(isolates, names(isolate_labels))) != length(isolate_labels)
check_subtrs_vs_isolate_labs(subtrs, isolate_labels)
check_control_labels(control_labels)
load_all()
load_all()
check_subtrs_vs_isolate_labs(subtrs, control_labels)
load_all()
check_subtrs_vs_isolate_labs(subtrs, control_labels, "control_labels")
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = "NULL", bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr_2, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = "NULL", bootstrap = NULL, pureness = "1")
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = "1")
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = NULL, pureness = 100)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = "NULL", pureness = 1)
check_get_largest_subtree_input(subtrs = test_subtr, isolate_labels = test_pt, control_labels = NULL, bootstrap = 1000, pureness = 1)
test_locs <- locs[1:4]
test_pt <- pt[1:4]
test_dists <- dists[names(test_locs), names(test_locs)]
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
View(test_snv_dists)
ncol(test_snv_dists) == 8
(length(locs))^2
length(locs)
length(test_locs))^2
length(test_locs)
length(test_locs))^2
(length(test_locs)^2)
(length(test_locs)^2)-length(test_locs)
nrow(test_snv_dists) == (length(test_locs)^2)-length(test_locs)
colnames(locs)
colnames(tesst_snv_dists)
colnames(test_snv_dists)
all(colnames(locs) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Patient1", "Patient2", "Pair_Type"))
sapply(test_snv_dists, class)
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "integer", "integer", "character"))
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "integer", "integer", "character"))
all(unique(test_snv_dists$Loc1) == unique(test_snv_dists$Loc2) == names(test_locs))
all(unique(test_snv_dists$Loc1) == unique(test_snv_dists$Loc2) & unique(test_snv_dists$Loc2) == names(test_locs))
unique(test_snv_dists$Loc1) == unique(test_snv_dists$Loc2)
setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2))
setequal(unique(test_snv_dists$Loc1), unique( names(test_locs)))
test_snv_dists$Loc1
setequal(unique(test_snv_dists$Isolate2), unique( names(test_locs))
)
all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs))))
all(setequal(unique(test_snv_dists$Patient1), unique(test_snv_dists$Patient2)) & setequal(unique(test_snv_dists$Patient2), unique(names(test_pt))))
unique(test_snv_dists$Patient2)
unique(names(test_pt))
all(setequal(unique(test_snv_dists$Patient1), unique(test_snv_dists$Patient2)) & setequal(unique(test_snv_dists$Patient2), unique(test_pt)))
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
as.character(test_pt)
as.character(pt[1:4])
test_pt <- as.character(pt[1:4])
names(test_pt) <- names(pt[1:4])
test_pt
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
all(colnames(locs) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Patient1", "Patient2", "Pair_Type"))
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "character", "character", "character"))
ncol(test_snv_dist_no_pt) == 6
nrow(test_snv_dist_no_pt) == (length(test_locs)^2)-length(test_locs)
nrow(test_snv_dist_no_pt)
View(test_snv_dist_no_pt)
load_all()
#one with pt
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
#one without pt
test_snv_dist_no_pt <- get_snv_dists(dists = test_dists, locs = test_locs)
nrow(test_snv_dist_no_pt) == (length(test_locs)^2)-length(test_locs)
all(colnames(locs) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Pair_Type"))
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "character"))
all(colnames(test_snv_dists) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Patient1", "Patient2", "Pair_Type"))
all(colnames(test_snv_dist_no_pt) == c("Isolate1", "Isolate2", "Pairwise_Dists", "Loc1", "Loc2", "Pair_Type"))
all(sapply(test_snv_dists, class) == c("factor", "factor", "numeric", "character", "character", "character"))
View(test_snv_dists)
all(sapply(test_snv_dist_no_pt, class) == c("factor", "factor", "numeric", "character", "character", "character"))
all(setequal(unique(test_snv_dists$Isolate1), unique(test_snv_dists$Isolate2)) & setequal(unique(test_snv_dists$Isolate2), unique(names(test_locs))))
all(setequal(unique(test_snv_dists$Loc1), unique(test_snv_dists$Loc2)) & setequal(unique(test_snv_dists$Loc2), unique(test_locs)))
library(ape)
library(dplyr)
library(devtools)
load_all()
test_locs <- locs[1:4]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees)
test_locs
test_locs <- locs[1:4]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees)
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees)
length(test_pure_subtrees)
names(test_pure_subtrees)
names(test_pure_subtrees) == c("largest_st","largest_st_i","largest_st_edges")
all(names(test_pure_subtrees) == c("largest_st","largest_st_i","largest_st_edges"))
sapply(test_pure_subtrees, class)
all(sapply(test_pure_subtrees, class) == c("list", "list", "list"))
sapply(test_pure_subtrees[[1]], class)
all(sapply(test_pure_subtrees[[1]], class) == "numeric")
sapply(test_pure_subtrees[[2]], class)
sapply(test_pure_subtrees[[3]], class)
all(sapply(test_pure_subtrees[[3]], class) == "integer")
sapply(test_pure_subtrees, length)
length(locs)
length(test_locs)
all(sapply(test_pure_subtrees, length) == length(test_locs))
test_locs <- locs[1:6]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
all(sapply(test_pure_subtrees, length) == length(test_locs))
View(test_pure_subtrees)
length(test_locs)
sapply(test_pure_subtrees, length)
test_locs <- locs[1:4]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees)
View(test_pure_subtrees)
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_subtr <- ape::subtrees(test_tr)
test_pure_subtrees <- get_largest_subtree(subtrs = test_subtr, isolate_labels = test_locs, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees)
test_pure_subtrees[[1]] != 0
test_pure_subtrees[[2]] != 1
all(test_pure_subtrees[[1]] != 0) == (test_pure_subtrees[[2]] != 1)
(test_pure_subtrees[[1]] != 0) == (test_pure_subtrees[[2]] != 1)
all(test_pure_subtrees[[1]] != 0) == (test_pure_subtrees[[2]] != 1)
all(test_pure_subtrees[[1]] != 0) == (test_pure_subtrees[[2]] != 1))
(all((test_pure_subtrees[[1]] != 0) == (test_pure_subtrees[[2]] != 1)))
test_pure_subtrees[[1]] == 0
length(test_pure_subtrees[[2]])
sapply(test_pure_subtrees[[2]], length)
sapply(test_pure_subtrees[[3]], length)
test_pure_subtrees[[3]][1]
View(test_subtr)
sapply(test_pure_subtrees[[3]], length) >= length(locs)
set.seed(1)
tr <- ape::tr(25)
facils <- sample(c('A','B'), 25, replace = TRUE)
names(facils) <- tr$tip.label
plot_facil <- c(facils, rep(NA, ape::Nnode(tr)))
ggtree::ggtree(tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_facil), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
clusts <- get_clusters(tr, facils)
clusts$pure_subtree_info
sum_sizes <- sum(clusts$pure_subtree_info$subtr_size)
sum_sizes == ape::Ntip(tr)
st_tiplabs <- sapply(1:nrow(clusts$pure_subtree_info), function(x){
i <- clusts$pure_subtree_info$index[x]
name <- clusts$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- clusts$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(tr)
set.seed(1)
tr <- ape::rtree(25)
facils <- sample(c('A','B'), 25, replace = TRUE)
names(facils) <- tr$tip.label
plot_facil <- c(facils, rep(NA, ape::Nnode(tr)))
ggtree::ggtree(tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_facil), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
clusts <- get_clusters(tr, facils)
clusts$pure_subtree_info
sum_sizes <- sum(clusts$pure_subtree_info$subtr_size)
sum_sizes == ape::Ntip(tr)
st_tiplabs <- sapply(1:nrow(clusts$pure_subtree_info), function(x){
i <- clusts$pure_subtree_info$index[x]
name <- clusts$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- clusts$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(tr)
plot_facil <- c(facils, rep(NA, ape::Nnode(tr)))
ggtree::ggtree(tr) + ggtree::geom_tippoint(ggplot2::aes(col=plot_facil), size = 3) + ggtree::geom_tiplab(hjust = -0.5)
clusts$pure_subtree_info
set.seed(1)
test_tr_2 <- ape::rtree(25)
facils <- sample(c('A','B'), 25, replace = TRUE)
names(facils) <- test_tr_2$tip.label
test_subtr_2 <- ape::subtrees(test_tr_2)
test_pure_subtrees_2 <- get_largest_subtree(subtrs = test_subtr_2, isolate_labels = facils, bootstrap = NULL, pureness = 1)
View(test_pure_subtrees_2)
test_locs <- locs[1:10]
test_tr <- keep.tip(tr,names(test_locs))
test_clusters <- get_clusters(tr = test_tr,locs = test_locs)
test_pure_subtree_info <- test_clusters$pure_subtree_info
test_subtrees <- test_clusters$subtrees
test_cluster_pureness <- test_clusters$cluster_pureness
test_first_subtr <- test_subtrees[1][[1]]
View(test_pure_subtree_info)
sum(test_pure_subtree_info$subtr_size)
length(test_locs)
test_clusts <- get_clusters(test_tr_2, facils)
test_clusts$pure_subtree_info
sum_sizes <- sum(clusts$pure_subtree_info$subtr_size)
sum_sizes == ape::Ntip(tr)
st_tiplabs <- sapply(1:nrow(clusts$pure_subtree_info), function(x){
i <- clusts$pure_subtree_info$index[x]
name <- clusts$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- clusts$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(tr)
st_tiplabs
st_tiplabs
test_clusts$pure_subtree_inf
st_tiplabs <- sapply(1:nrow(test_clusters$pure_subtree_info), function(x){
i <- test_clusters$pure_subtree_info$index[x]
name <- test_clusters$pure_subtree_info$isolate_name[x]
if(!is.na(i)){
name <- test_clusters$subtrees[[i]]$tip.label
}
name
})
length(unlist(st_tiplabs)) == ape::Ntip(test_tr)
sum(test_pure_subtrees_2$largest_st)
sapply(test_pure_subtrees_2$largest_st, sum)
sum(sapply(test_pure_subtrees_2$largest_st, sum))
ls <- list(list(a = 2, b = 3), list(c = "a", d = "b"))
sl <- reverse_list_str(ls)
ls
sl
z <- list(z1 = list(a = 1, b = 2, c = 3), z2 = list(b = 4, a = 1, c = 0))
o <- list(a = list(z1 = 1, z2 = 1), b = list(z1 = 2, z2 = 4), c = list(z1 = 3, z2 = 0))
oz <- reverse_list_str(z)
z
o
oz
o == oz
names(0)
names(o)
names(z)
names(oz)
all(names(o) == names(oz))
all(names(o) == names(z))
intersect(names(o),names(z))
intersect(names(o),names(z))
length(intersect(names(o), names(z)))
length(intersect(names(o), names(z))) == 0
#contents of o and oz are the same
oz[[1]]
unlist(oz[[1]])
unlist(o[[1]])
all(unlist(oz[[1]]) == unlist(o[[1]]))
expect_true(all(unlist(oz[[2]]) == unlist(o[[2]])))
all(unlist(oz[[2]]) == unlist(o[[2]]))
oz
all(unlist(oz[[3]]) == unlist(o[[3]]))
test_locs <- locs[1:4]
test_pt <- pt[1:4]
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_locs <- locs[1:4]
test_pt <- pt[1:4]
test_dists <- dists[names(test_locs), names(test_locs)]
test_snv_dists <- get_snv_dists(dists = test_dists, locs = test_locs, pt = test_pt)
test_subset_pairs <- subset_pairs(test_snv_dists)
View(test_subset_pairs)
View(test_snv_dists)
nrow(test_subset_pairs) == nrow(test_snv_dists)*.5
nrow(test_subset_pairs) == length(locs)^2 - length(locs)
nrow(test_subset_pairs) == length(test_locs)^2 - length(test_locs)
length(test_locs)^2 - length(test_locs)
length(test_locs)^2 - length(test_locs)*2
length(test_locs)*(length(test_locs)-1)
factorial(length(test_locs)-1)
length(test_locs)
length(test_locs)-1
sum(((length(test_locs)-1)^2 + length(test_locs)-1)/2)
sum(1:(length(test_locs)-1))
1:(length(test_locs)-1)
nrow(test_subset_pairs) == sum(1:(length(test_locs)-1))
paste(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
cbind(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)
table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2))
length(test_locs)-1
table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)) == (length(test_locs)-1)
all(table(c(test_subset_pairs$Isolate1, test_subset_pairs$Isolate2)) == (length(test_locs)-1))
library(testthat)
load_all()
getwd()
devtools::test()
z <- list(z1 = list(a = 1, b = 2, c = 3), z2 = list(b = 4, a = 1, c = 0))
o <- list(a = list(z1 = 1, z2 = 1), b = list(z1 = 2, z2 = 4), c = list(z1 = 3, z2 = 0))
oz <- reverse_list_str(z)
intersect(names(o), names(z))
length(intersect(names(o), names(z))) == 0
load_all()
devtools::test()
testthat::test_dir()
getwd()
testthat::test_dir(".")
?devtools::test
devtools::test(stop_on_failure = TRUE)
devtools::check_failures(".")
devtools::check()
??bind_cols
??keep.tip
?keep.tip
class(fasta)
all(class(fasta) != "DNAbin")
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
document()
load_all()
devtools::check()
devtools::test()
